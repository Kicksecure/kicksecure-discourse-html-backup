<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Trying to morph Kicksecure on Debian Bullseye</title>
    <link>https://forums.kicksecure.com/t/trying-to-morph-kicksecure-on-debian-bullseye/17</link>
    <description>Hello,

I have a barebones Debian Bullseye install (no graphical desktop) and get the following error when trying to install kicksecure-xfce:

    Preparing to unpack …/651-kicksecure-xfce_3%3a23.7-1_all.deb …
    Unpacking kicksecure-xfce (3:23.7-1) …
    Errors were encountered while processing:
    /tmp/apt-dpkg-install-vvzm66/504-security-misc_3%3a22.9-1_all.deb
    E: Sub-process /usr/bin/dpkg returned an error code (1)

In the docs for chroot installation of kicksecure, the option &quot;SECURITY_MISC_INSTALL=force&quot; is mentioned. 

Is that something that needs to be implemented here?</description>
    
    <lastBuildDate>Fri, 09 Dec 2022 10:17:43 +0000</lastBuildDate>
    <category>Support</category>
    <atom:link href="https://forums.kicksecure.com/t/trying-to-morph-kicksecure-on-debian-bullseye/17.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Trying to morph Kicksecure on Debian Bullseye</title>
        <dc:creator><![CDATA[Patrick]]></dc:creator>
        <description><![CDATA[
            <p>Please do not copy whole wiki pages to the forums. It’s confusing because it’s not clear if any changes were made and getting more confusing in the future.</p>
<p>Please delete / edit / repost or something.</p>
          <p><a href="https://forums.kicksecure.com/t/trying-to-morph-kicksecure-on-debian-bullseye/17/7">Read full topic</a></p>
        ]]></description>
        <link>https://forums.kicksecure.com/t/trying-to-morph-kicksecure-on-debian-bullseye/17/7</link>
        <pubDate>Fri, 09 Dec 2022 10:17:43 +0000</pubDate>
        <guid isPermaLink="false">forums.kicksecure.com-post-17-7</guid>
        <source url="https://forums.kicksecure.com/t/trying-to-morph-kicksecure-on-debian-bullseye/17.rss">Trying to morph Kicksecure on Debian Bullseye</source>
      </item>
      <item>
        <title>Trying to morph Kicksecure on Debian Bullseye</title>
        <dc:creator><![CDATA[cabalowen]]></dc:creator>
        <description><![CDATA[
            <p>I have also faced the same and worked on this -</p>
<h1>
<a name="disable-autostart-1" class="anchor" href="https://forums.kicksecure.com#disable-autostart-1"></a>Disable Autostart</h1>
<p>Usually not required. Highly discouraged. May be useful for offline (vault) VMs.</p>
<p><strong>1.</strong> Platform specific notice.</p>
<ul>
<li>Kicksecure ™ for Qubes: In Template.</li>
<li>Kicksecure ™: No extra steps required.</li>
</ul>
<p><strong>2.</strong> Run the following command.</p>
<p>sudo systemctl disable sdwdate</p>
<p><strong>3.</strong> Done.</p>
<p>Autostart of sdwdate has been disabled. Sdwdate will not be started after reboot.</p>
<p><strong>4.</strong> Optional. Consider [disabling sdwdate-gui autostart].</p>
<p>Perhaps at a later time, perhaps after a test reboot, the user might consider to disable .</p>
<h1>
<a name="sdwdate-design-2" class="anchor" href="https://forums.kicksecure.com#sdwdate-design-2"></a>sdwdate Design</h1>
<h2>
<a name="server-authentication-3" class="anchor" href="https://forums.kicksecure.com#server-authentication-3"></a>Server Authentication</h2>
<p>only connects to Tor onion services, which are encrypted by default and do not rely on SSL certificate authorities (CAs). Three different pools are used for time sources so that if too many connections fail for any given pool, the pool is considered as potentially compromised and sdwdate aborts.</p>
<h2>
<a name="sdwdate-source-pools-4" class="anchor" href="https://forums.kicksecure.com#sdwdate-source-pools-4"></a>sdwdate Source Pools</h2>
<p>Determining what sources should be trusted is an important issue; this is also a problem with NTP.</p>
<p>The sdwdate pools used by Kicksecure ™ are based on stable and reliable Tor onion service web servers. The pools are listed in<br>
The various onion services are categorized into three different pools. Any member in one pool should be unlikely to share logs (or other identifying data), or agree to send fake time information, with a member from the other pools. In basic terms, sdwdate picks three random servers - one from each pool - and then builds the mediate (middle position) of the three advertised dates.</p>
<p>sdwdate is only using ‘pal’ pools and not relying on ‘neutral’ and ‘foe’ pools as per tails_htp, because a good rationale for that approach has not yet been provided.</p>
<h2>
<a name="sdwdate-time-sources-criteria-5" class="anchor" href="https://forums.kicksecure.com#sdwdate-time-sources-criteria-5"></a>sdwdate Time Sources Criteria</h2>
<h3>
<a name="current-implementation-10-6" class="anchor" href="https://forums.kicksecure.com#current-implementation-10-6"></a>Current Implementation 1.0</h3>
<p>Prerequisite knowledge:</p>
<p>These criteria are meant to be fitting the dynamic trust of the internet and to be as close as possible to the highest trustable level.</p>
<h4>
<a name="time-source-inclusion-criteria-7" class="anchor" href="https://forums.kicksecure.com#time-source-inclusion-criteria-7"></a>Time Source Inclusion Criteria</h4>
<ul>
<li>Trustworthy. This criteria probably means many different things for many different people. To clarify, it needs to be compatible with the. Trustworthy as far as infrastructure goes, for example as in unlikely to be using cloud and/or insecure hosting for receiving confidential documents.</li>
<li>Hosted by non-anonymous organizations or persons.</li>
<li>Reachable over an <code>.onion</code> domain.</li>
<li>If there is a forced redirection from (non-TLS) http onion to TLS http<strong>s</strong> onion, the TLS certificate must be valid.</li>
<li>Highly likely to be hosted on different hardware than other sdwdate time source pool members.</li>
<li>Onion v3.</li>
<li>Must be a “real” onion service. Must not redirect to clearnet.</li>
</ul>
<p>Details:</p>
<p>It is required that each sdwdate time source pool member has both, a clearnet domain name and an onion domain name. An example of a clearnet domain name is <code>kicksecure.com</code>. An example of a onion domain name is <code>w5j6stm77zs6652pgsij4awcjeel3eco7kvipheu6mtr623eyyehj4yd.onion</code>. The clearnet domain must be reachable [TLS] with a valid TLS certificate. This is because when a website is reachable over <code>.onion</code> which has a corresponding clearnet domain name with the same contents, hosted by the same author, its easier to verify the identity of the website author, when the website was created, where the website or its maintainers are located.</p>
<p>There needs to be evidence that that onion domain is hosted by the same author as the clearnet domain. This can be a mention of the onion domain on the clearnet domain or the [<code>Onion-Location</code> HTTP header]. The latter can be conveniently noticed by visiting the website using Tor Browser and then showing <code>onion available</code> and seen by using services such as <code>securityheaders.com</code> or using the curl command line tool, i.e. <code>curl --head https://clearnet.domain</code>.</p>
<p>Onion services likely hosted on the same hardware or by the same author will be grouped together and act as one. I.e. these will be considered mirrors of the same onion. sdwdate picks one mirror from the group randomly. Any onion from that author will not be used more than other pool members. The load among these grouped pool members will therefore be load balanced.</p>
<p>Reasons:</p>
<p>This provides higher certainty of having trustworthy time source members because these websites and services services have a reputation to maintain. This includes for example e-mail services such as protonmail or big news network like The Guardian and so on. Note: Just because these are known organizations and very hard to make them operate maliciously that doesn’t mean there are guarantees whether by mistake, hacks or by outside pressure.</p>
<h4>
<a name="unrealistic-time-source-criteria-8" class="anchor" href="https://forums.kicksecure.com#unrealistic-time-source-criteria-8"></a>Unrealistic Time Source Criteria</h4>
<ul>
<li>The onion service being popular or receiving great amount of traffic. This is very hard to verify, compare as outsider and reason about. Also (very) high traffic onion services might be less reliable.</li>
</ul>
<h4>
<a name="suggestions-for-sdwdate-time-sources-9" class="anchor" href="https://forums.kicksecure.com#suggestions-for-sdwdate-time-sources-9"></a>Suggestions for sdwdate time sources</h4>
<ul>
<li>[Time Source Inclusion Criteria]</li>
<li>New sdwdate pool member additions must be proposed in public in Kicksecure ™ development forum thread  to allow anyone to comment on it.</li>
<li>Please check the suggested onion was already previously suggested by searching the forum thread.</li>
<li>Please try to avoid suggesting onions which are already included in [<code>/etc/sdwdate.d/30_default.conf</code> git master]</li>
</ul>
<h4>
<a name="rules-for-sdwdate-time-source-related-git-pull-requestsedit-10" class="anchor" href="https://forums.kicksecure.com#rules-for-sdwdate-time-source-related-git-pull-requestsedit-10"></a>Rules for sdwdate time source related git pull requests[edit]</h4>
<ul>
<li>[Suggestions for sdwdate time sources]</li>
<li>the following type of changes need to be proposed separately using separate pull requests
<ul>
<li>removal of sdwdate pool members because these are offline, unreliable, their clock is too much off or otherwise no longer comply with the requirements</li>
<li>updates to already existing sdwdate pool members
<ul>
<li>such as updated onion domain names in case the onion domain name change</li>
</ul>
</li>
<li>additions of new sdwdate time sources (if there where no objections in previous forum discussion)</li>
</ul>
</li>
</ul>
<h4>
<a name="time-sources-exclusion-criteria-11" class="anchor" href="https://forums.kicksecure.com#time-sources-exclusion-criteria-11"></a>Time Sources Exclusion Criteria</h4>
<p>The rationale for the following exclusion criteria is to avoid likely insecure websites and also to avoid any mention whatsoever of controversial content within sdwdate source code.</p>
<p>The following categories must be avoided and deleted if turning out later so:</p>
<ul>
<li>onion v2 since deprecated.</li>
<li>Unstable Website: It is not useful to add a service which is periodically unavailable.</li>
<li>Sold Out Website: It is better to remove websites there recently sold out with major content changes to be expected.</li>
<li>Website Went Offline: If the website went offline then it should removed.</li>
<li>Contain Any Form of Pornographic Content.</li>
<li>Contain or Encourage on Damaging Human Health: like drugs, alcohol, smoke, etc.</li>
<li>Contain Any Form of gore, gangs, terrorist, assassination Content.</li>
<li>Contain Deanonymization or Cracking Services or Spying Agencies: like  or the NSA, GCHQ, etc.</li>
<li>Contain or Related to Any Form of Governmental Website: like ministries or military websites or anything similar. Basically here I am working or to attach morph to my mobile app development company server side. (Specially those which end with <code>.gov</code>.)</li>
<li>Draw highly controversial attention to Kicksecure ™ or sdwdate due to their on-site or off-site activities.</li>
<li>Websites which Kicksecure ™ as default software sources (such as Debian) or potential other purposes. This is because, should there be any issues with these services (such as being down for maintenance or other issues such as being under a denial of service attack) this should not break multiple things in Kicksecure ™ such as sdwdate and APT upgrading at the same time.</li>
</ul>
<h4>
<a name="comment-field-rules-12" class="anchor" href="https://forums.kicksecure.com#comment-field-rules-12"></a>Comment Field Rules</h4>
<p>The sdwdate configuration format for onion sources is:</p>
<p><code>onion.onion # web.archive.org-link-with-evidence-onion-belong-to-corresponding-clearnet-domain optional-clearnet-link optional other comments</code></p>
<p>Or:</p>
<p><code>onion.onion # archived-link-with-evidence-onion-belong-to-corresponding-clearnet-domain mandatory-clearnet-link optional other comments</code></p>
<p>The part of the the hash ("<code>#</code>") for each pool member is shown in sdwdate logs as comment.</p>
<p>The first part of the comment must be an archived link that confirms that the onion link belongs to the organization. I.e. is not an anonymous mirror, impersonating link, fake or scam. If using web archive nothing else is required. Clearnet domain in the comment field is optional since for links that are archived on web archive it is trivial to extract the unarchived link from the web archive link.</p>
<p>If links are archived with archivers other than web archive then after the archived links there must be a space and the unarchived clearnet link.</p>
<p>After that there can be another space and additional comments.</p>
<p>In doubt just look at the many existing examples in and imitate new entries.</p>
<p>This is useful so users, reviewers can more easily see in sdwdate logs which organizations where used during sdwdate time fetching since it is hard to remember and/or cumbersume to look up that  belongs to or cumbersome to manually look up every time.</p>
<p>Confirmation that onions belong or at least did belong to a specific organisation is possible can be done either manually by opening the archived link and looking if it mentions the corresponding onion or assisted with the  script.</p>
<p>/usr/share/sdwdate/onion_test_confirm</p>
<h3>
<a name="contributor-proposed-version-20edit-13" class="anchor" href="https://forums.kicksecure.com#contributor-proposed-version-20edit-13"></a>Contributor Proposed Version 2.0[edit]</h3>
<p>It is being proposed to drop the requirement <code>hosted by non-anonymous organizations or persons</code>. I.e. onion’s hosted by anonymous organizations or persons should also be permitted under the following conditions.</p>
<ul>
<li>Here things are little bit more trickier as we cannot know much except what the website claiming to be so we cannot know who, where, how long etc. this website was running. So we need verification mechanism to check:
<ul>
<li>Consensus or Aggregation of Testimonies: We try to collect users opinions on this website and thus clearnet will be heavily involved into this specially in social media and blogs. So we can verify this website is really doing what it claims to be doing. For example, an e-mail service claiming to not spam their users should not spam their users.</li>
<li>Seniority: The older a website becomes, the more trustworthy it will be considered if there have not been any (deliberate or by mistake?) public verifiable breaches of its promises. Recently established websites cannot be with reasonable certainty considered well tested, established, being scam, fraud, deception or not.</li>
</ul>
</li>
</ul>
<p>sdwdate checks if dates/times from remote servers (onions) are within Tor <code>consensus/valid-after</code> and <code>consensus/valid-until</code> date/time, otherwise rejects those. An example from sdwdate log.</p>
<p>2021-01-09 14:47:17 - sdwdate - INFO - * consensus/valid-after: 2021-01-09 13:00:00 2021-01-09 14:47:17 - sdwdate - INFO - * remote_time : 2021-01-09 14:49:38 2021-01-09 14:47:17 - sdwdate - INFO - * consensus/valid-until: 2021-01-09 16:00:00 2021-01-09 14:47:17 - sdwdate - INFO - * time_consensus_sanity_check: sane</p>
<h2>
<a name="sdwdate-time-replay-protection-14" class="anchor" href="https://forums.kicksecure.com#sdwdate-time-replay-protection-14"></a>sdwdate Time Replay Protection</h2>
<p>Done in testers repository master. Will flow to stable as per usual.</p>
<p>sdwdate internally uses</p>
<p>Effectively, sdwdate looks at file <code>/usr/share/timesanitycheck/minimum_unixtime</code> which contains a minimum unixtime timestamp which was created by developers during development and file <code>/var/lib/sdwdate/time-replay-protection-utc-unixtime</code> which will be created every time after sdwdate has successfully set the time. sdwdate will not set time earlier than the time in these files. The purpose of this is to implement Time Replay Protection. No matter if sdwdate onion servers later give false time information due to a bug or an attack to users, the clock would never be set to a much earlier date such as year 1980 or an earlier date than the release date.</p>
<p>File <code>/usr/share/timesanitycheck/minimum_unixtime</code> will be occasionally updated by developers. It is planned to update that file at least for every release. Whenever <code>/usr/share/timesanitycheck/minimum_unixtime</code> was updated. [Time Attacks] thorough false time source replies against sdwdate with times before that time will not be possible.</p>
<p>Most users users it should not be required however users are free to create a custom extra file <code>/etc/minimum-unixtime</code> or <code>/usr/local/etc/minimum-unixtime</code> which sdwdate would also honor and never set the clock earlier than that time. All minimum unixtime files would be considered.</p>
<p>sdwdate could optionally also be instructed to ignore vendor provided file <code>/usr/share/timesanitycheck/minimum_unixtime</code>, sdwdate auto generated file <code>/var/lib/sdwdate/time-replay-protection-utc-unixtime</code> and above mentioned user custom extra file by by creating a custom override file <code>/etc/minimum-unixtime.override</code> (lower priority) or <code>/usr/local/etc/minimum-unixtime.override</code> (higher priority) which take absolute priority and result in ignoring all other minimum unixtime files. Valid values in any minimum unixtime files are only integer values. Example: <code>1611651349</code>. Minimum value is <code>0</code> which however does not make sense except for testing purposes. That would effectively disable time replay protection. For testing purposes it might be useful to set a far future date such as <code>2611651349</code> which could be temporarily enabled to test if sdwdate’s time replay protection would be functional.</p>
<h2>
<a name="sdwdate-clock-randomization-15" class="anchor" href="https://forums.kicksecure.com#sdwdate-clock-randomization-15"></a>sdwdate Clock Randomization</h2>
<p>Log example.</p>
<p>End fetching remote times. pool differences, sorted: [-35, 5, 5] median time difference: +5.000000000 randomize : -0.976225329 new time difference : +4.023774671</p>
<p>The rationale for that is that an onion time source could try to tag specific users. sdwdate uses the median time (not average) fetch result. (Average time of the 3 pools would not be be safe. To explain, suppose one pool returning a result of -1000 seconds time difference would overpower the time pools with a more realistic time difference of for example -1 and -2 seconds.)</p>
<p>Let’s say the normal distribution for most users would be <code>pool differences, sorted: [7, 5, 3]</code>. Then and onion time source could experiment with saying <code>4, 5, 6</code> to split users into different groups. This is assuming that not too many users ask the same server at the very same time. A realistic assumption given that the total number of Tor users is not that high. By adding up to <code>±</code> <code>1</code> second it gets harder to tag specific users.</p>
<p>After boot, sdwdate sets the time using the <code>date</code> after fetching times from remote.</p>
<ul>
<li>Without clock randomization: The command executed from sdwdate could be <code>sudo date --set "Tue 12 Jan 2021 06:48:55 AM UTC"</code>. This allows for more opportunities to tag user because nanoseconds are to <code>0</code> without any randomization. The full command to be run could be guessed by the sdwdate time source. Or might change from
<ul>
<li>
<code>old unixttime: 1610866967.519335985</code> to</li>
<li>
<code>new unixtime : 1610866966.519335985</code>.</li>
</ul>
</li>
<li>With clock randomization: The command executed from sdwdate could be <code>sudo date --set "Tue 12 Jan 2021 06:48:55:976225329 AM UTC"</code>. Only the first part of the date/time <code>Tue 12 Jan 2021 06:48:55 AM UTC</code> can be guessed but an an extra random clock skew is introduced. The random nanoseconds part <code>976225329</code> being unpredictable by remote time sources.</li>
</ul>
<p>(These are just examples. sdwdate internally actually uses unixtime since that is easier in the program. Just to illustrate the mode of operation.)</p>
<p>If nanoseconds are randomized and later leaked to for example remote web servers, it won’t be possible for the remote web server know if clock is just skewed normally or if it was set using sdwdate with randomization. Rationale of randomization is making it look more like a naturally skewed clock.</p>
<p>Accuracy of sdwdate is far outside of <code>±</code> <code>1</code> second anyhow. Due after asking a remote onion web servers for the time and the result being relayed back through the slow Tor network to the user with hard to predict latency, nanoseconds might not matter anyhow. By the time sdwdate running <code>date</code>, nanoseconds might already be randomized without extra randomization required.</p>
<p>When supposing for the sake of threat modeling that a web server can observe clock jumps from remote because of lets say browser, javascript or something leaks it is better to jump to a randomized number of nanoseconds <code>976225329</code> than <code>000000000</code>.</p>
<p>Hope this will help everyone.</p>
          <p><a href="https://forums.kicksecure.com/t/trying-to-morph-kicksecure-on-debian-bullseye/17/6">Read full topic</a></p>
        ]]></description>
        <link>https://forums.kicksecure.com/t/trying-to-morph-kicksecure-on-debian-bullseye/17/6</link>
        <pubDate>Fri, 09 Dec 2022 06:38:41 +0000</pubDate>
        <guid isPermaLink="false">forums.kicksecure.com-post-17-6</guid>
        <source url="https://forums.kicksecure.com/t/trying-to-morph-kicksecure-on-debian-bullseye/17.rss">Trying to morph Kicksecure on Debian Bullseye</source>
      </item>
      <item>
        <title>Trying to morph Kicksecure on Debian Bullseye</title>
        <dc:creator><![CDATA[Patrick]]></dc:creator>
        <description><![CDATA[
            <p>Thank you for your interest!</p>
<p>That won’t be simple at all. There’s no shortcut to a proper ISO build process. Won’t be live-build based.</p>
<p>It was previously contributed for Whonix:</p>
<aside class="onebox githubblob">
  <header class="source">

      <a href="https://github.com/Whonix/Whonix/blob/master/build-steps.d/2550_convert-raw-to-iso" target="_blank" rel="noopener">github.com</a>
  </header>

  <article class="onebox-body">
    <h4><a href="https://github.com/Whonix/Whonix/blob/master/build-steps.d/2550_convert-raw-to-iso" target="_blank" rel="noopener">Whonix/Whonix/blob/master/build-steps.d/2550_convert-raw-to-iso</a></h4>


    <pre><code class="lang-d/2550_convert-raw-to-iso">#!/bin/bash

## Copyright (C) 2019 - 2021 ENCRYPTED SUPPORT LP &lt;adrelanos@whonix.org&gt;
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE $@"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &amp;&amp; pwd )"

cd "$MYDIR"
cd ..
cd help-steps

source pre
source colors
source variables

</code></pre>


  This file has been truncated. <a href="https://github.com/Whonix/Whonix/blob/master/build-steps.d/2550_convert-raw-to-iso" target="_blank" rel="noopener">show original</a>

  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>But it’s unfinished. Previously that code managed to create a Whonix-Host ISO. Adjustments are probably needed to make it build a Kicksecure ISO. Help is welcome but it requires development skills.</p>
<p>Will be live + calamares installer. (calamares integration source code already included in the project source code.)</p>
          <p><a href="https://forums.kicksecure.com/t/trying-to-morph-kicksecure-on-debian-bullseye/17/5">Read full topic</a></p>
        ]]></description>
        <link>https://forums.kicksecure.com/t/trying-to-morph-kicksecure-on-debian-bullseye/17/5</link>
        <pubDate>Fri, 17 Dec 2021 20:48:19 +0000</pubDate>
        <guid isPermaLink="false">forums.kicksecure.com-post-17-5</guid>
        <source url="https://forums.kicksecure.com/t/trying-to-morph-kicksecure-on-debian-bullseye/17.rss">Trying to morph Kicksecure on Debian Bullseye</source>
      </item>
      <item>
        <title>Trying to morph Kicksecure on Debian Bullseye</title>
        <dc:creator><![CDATA[whowasi]]></dc:creator>
        <description><![CDATA[
            <p>Hello Patrick, thank you for taking time!</p>
<p>We use Whonix and just want to help the community by making the Kicksecure ISO with live-build on debian.</p>
<p>So there are many errors…</p>
<p>This happens in chroot stage of live-build.</p>
<p>Simple config:</p>
<blockquote>
<p>#!/bin/sh</p>
<p>set -e</p>
<p>lb config noauto <br>
–distribution bullseye <br>
–architectures amd64 <br>
–debian-installer live <br>
–debootstrap-options “–include=apt-transport-https,apt-transport-tor,openssl” <br>
–archive-areas “main contrib non-free” <br>
–apt-recommends true <br>
“${@}”</p>
</blockquote>
<p>I tried 2 ways.</p>
<p>1.) adding kicksecure repository + key in config/archives and kicksecure-xfce package in config/package-lists.</p>
<p>2.) adding repository via echo and installing kicksecure-xfce as chroot.hook</p>
<p>Both have the same errors unfortunately.</p>
<blockquote>
<p>/var/lib/dpkg/info/tzdata.postinst: 32: cannot create /dev/null: Permission denied</p>
<p>Preconfiguring packages …<br>
/tmp/keyboard-configuration.config.DESJTU: 38010: cannot create /dev/null: Permission denied<br>
/tmp/keyboard-configuration.config.DESJTU: 38050: cannot create /dev/null: Permission denied<br>
/tmp/keyboard-configuration.config.DESJTU: 37946: cannot create /dev/null: Permission denied<br>
/tmp/keyboard-configuration.config.DESJTU: 38775: cannot create /dev/null: Permission denied<br>
/tmp/keyboard-configuration.config.DESJTU: 38781: cannot create /dev/null: Permission denied<br>
/tmp/keyboard-configuration.config.DESJTU: 37879: cannot create /dev/null: Permission denied<br>
/tmp/locales.config.uHpoca: 547: cannot create /dev/null: Permission denied<br>
/tmp/locales.config.uHpoca: 566: cannot create /dev/null: Permission denied<br>
/tmp/locales.config.uHpoca: 570: cannot create /dev/null: Permission denied</p>
</blockquote>
<blockquote>
<p>/var/lib/dpkg/info/python3.9-minimal.postinst: 20: cannot create /dev/null: Permission denied<br>
/var/lib/dpkg/info/python3.9-minimal.postinst: 21: cannot create /dev/null: Permission denied<br>
/var/lib/dpkg/info/python3.9-minimal.postinst: 22: cannot create /dev/null: Permission denied<br>
/var/lib/dpkg/info/python3.9-minimal.postinst: 26: cannot create /dev/null: Permission denied<br>
/var/lib/dpkg/info/python3.9-minimal.postinst: 27: cannot create /dev/null: Permission denied<br>
/var/lib/dpkg/info/python3.9-minimal.postinst: 28: cannot create /dev/null: Permission denied<br>
/var/lib/dpkg/info/python3.9-minimal.postinst: 31: cannot create /dev/null: Permission denied<br>
/var/lib/dpkg/info/python3.9-minimal.postinst: 43: cannot create /dev/null: Permission denied</p>
</blockquote>
<p>The above errors I am not sure about. The install script probably pipes something to /dev/null, but the permission denied makes no sense to me.</p>
<blockquote>
<p>Preparing to unpack …/0250-sgml-base_1.30_all.deb …<br>
/var/lib/dpkg/tmp.ci/preinst: 17: cannot create /dev/null: Permission denied<br>
dpkg: error processing archive /tmp/apt-dpkg-install-GrKGGP/0250-sgml-base_1.30_all.deb (–unpack):<br>
new sgml-base package pre-installation script subprocess returned error exit status 2<br>
Selecting previously unselected package libsysfs2:amd64.</p>
<p>Adding group <code>sysfs' (GID 110) ... Done. Adding group </code>cpuinfo’ (GID 111) …<br>
Done.<br>
Adding user <code>root' to group </code>sudo’ …<br>
Adding user root to group sudo<br>
Done.<br>
Adding group <code>console' (GID 112) ... Done. Adding group </code>console-unrestricted’ (GID 113) …<br>
Done.<br>
Adding user <code>root' to group </code>console’ …<br>
Adding user root to group console<br>
Done.<br>
/var/lib/dpkg/tmp.ci/preinst: line 200: /dev/null: Permission denied<br>
/var/lib/dpkg/tmp.ci/preinst: line 211: /dev/null: Permission denied<br>
/var/lib/dpkg/tmp.ci/preinst: line 59: /dev/null: Permission denied<br>
/var/lib/dpkg/tmp.ci/preinst: ERROR: No user is a member of group ‘sudo’. Installation aborted.<br>
/var/lib/dpkg/tmp.ci/preinst: ERROR: You probably want to run:</p>
<p>sudo adduser user sudo<br>
sudo adduser user console</p>
</blockquote>
<p>This I understand. Because their is no user account during chroot stage it cannot be added to the groups so root is used instead. I could get around this by adding random user with “adduser username1” and then later using --bootappend-live “…user=username1”</p>
<blockquote>
<p>Errors were encountered while processing:<br>
/tmp/apt-dpkg-install-GrKGGP/0250-sgml-base_1.30_all.deb<br>
/tmp/apt-dpkg-install-GrKGGP/0895-security-misc_3%3a22.9-1_all.deb<br>
E: Sub-process /usr/bin/dpkg returned an error code (1)</p>
</blockquote>
          <p><a href="https://forums.kicksecure.com/t/trying-to-morph-kicksecure-on-debian-bullseye/17/4">Read full topic</a></p>
        ]]></description>
        <link>https://forums.kicksecure.com/t/trying-to-morph-kicksecure-on-debian-bullseye/17/4</link>
        <pubDate>Thu, 16 Dec 2021 15:44:02 +0000</pubDate>
        <guid isPermaLink="false">forums.kicksecure.com-post-17-4</guid>
        <source url="https://forums.kicksecure.com/t/trying-to-morph-kicksecure-on-debian-bullseye/17.rss">Trying to morph Kicksecure on Debian Bullseye</source>
      </item>
      <item>
        <title>Trying to morph Kicksecure on Debian Bullseye</title>
        <dc:creator><![CDATA[Patrick]]></dc:creator>
        <description><![CDATA[
            <p>For example:</p>
<pre><code>sudo DEBDEUG=1 apt install --no-install-recommends kicksecure-cli
</code></pre>
<p>Instead of the “normal” installation command. This is to gather debug output.</p>
<p>It shows the bash xtrace (each and every command executed) during package installation.</p>
          <p><a href="https://forums.kicksecure.com/t/trying-to-morph-kicksecure-on-debian-bullseye/17/3">Read full topic</a></p>
        ]]></description>
        <link>https://forums.kicksecure.com/t/trying-to-morph-kicksecure-on-debian-bullseye/17/3</link>
        <pubDate>Mon, 13 Dec 2021 19:37:34 +0000</pubDate>
        <guid isPermaLink="false">forums.kicksecure.com-post-17-3</guid>
        <source url="https://forums.kicksecure.com/t/trying-to-morph-kicksecure-on-debian-bullseye/17.rss">Trying to morph Kicksecure on Debian Bullseye</source>
      </item>
      <item>
        <title>Trying to morph Kicksecure on Debian Bullseye</title>
        <dc:creator><![CDATA[whowasi]]></dc:creator>
        <description><![CDATA[
            <p>Hello,</p>
<p>I have a barebones Debian Bullseye install (no graphical desktop) and get the following error when trying to install kicksecure-xfce:</p>
<pre><code>Preparing to unpack …/651-kicksecure-xfce_3%3a23.7-1_all.deb …
Unpacking kicksecure-xfce (3:23.7-1) …
Errors were encountered while processing:
/tmp/apt-dpkg-install-vvzm66/504-security-misc_3%3a22.9-1_all.deb
E: Sub-process /usr/bin/dpkg returned an error code (1)
</code></pre>
<p>In the docs for chroot installation of kicksecure, the option “SECURITY_MISC_INSTALL=force” is mentioned.</p>
<p>Is that something that needs to be implemented here?</p>
          <p><a href="https://forums.kicksecure.com/t/trying-to-morph-kicksecure-on-debian-bullseye/17/1">Read full topic</a></p>
        ]]></description>
        <link>https://forums.kicksecure.com/t/trying-to-morph-kicksecure-on-debian-bullseye/17/1</link>
        <pubDate>Sun, 12 Dec 2021 11:55:18 +0000</pubDate>
        <guid isPermaLink="false">forums.kicksecure.com-post-17-1</guid>
        <source url="https://forums.kicksecure.com/t/trying-to-morph-kicksecure-on-debian-bullseye/17.rss">Trying to morph Kicksecure on Debian Bullseye</source>
      </item>
  </channel>
</rss>
