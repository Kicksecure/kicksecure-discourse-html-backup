<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Operating System from Heaven</title>
    <link>https://forums.kicksecure.com/t/operating-system-from-heaven/1153</link>
    <description>Based on my past experience with operating systems and software, there is still no great secure operating system developed, especially one based on free software. Most of the necessary software exists, but the challenge lies in integrating it all into a cohesive whole to produce the most secure operating system.

What I will add here are software that already exist in reality, not theoretical ones.

# Kernel (system)

Sadly, there is no reliable or usable freedom operating system based on a microkernel design. What we have are only monolithic ones, based on the Linux kernel.

Linux, by design, does not offer the same level of security as a microkernel. [It is considered obsolete](https://en.wikipedia.org/wiki/Tanenbaum%E2%80%93Torvalds_debate#Continued_dialogue); nobody would want to build an operating system from scratch based on a monolithic design in nowadays. 

Alternatives? 

- [Sel4](https://sel4.systems/)
- [Redox](https://doc.redox-os.org/book/microkernels.html) 
- [Zircon](https://fuchsia.dev/fuchsia-src/concepts/kernel)

All mentioned are in active development and free software (sel4 is copyleft). 

What i would avoid for sure is Zircon, because its google based.

What’s left are seL4 and Redox. Both are good, and if I had to choose one, I would choose seL4 due to its maturity.

Note (1): Minix and GNUmach are inactive.
Note (2): Hybrid kernel is not an option. 

# Packages Policy

The package is only going to be as secure and up-to-date as the upstream developers made it. There must be no interference or external involvement in adding or removing code from any package (no package maintainer).

### Why

We have the Debian design, and we&#39;ve seen how flawed it is when it comes to security and feature fixes. It&#39;s horrible in every aspect. What we get from Debian is, at best, working software, but that doesn’t mean it’s secure, up-to-date, or even stable. Issues like packages crashing on shutdown when clicking X or freezing on specific Y action, are common, and such bugs when occurs are unlikely to be addressed in a timely manner.

A major security flaw in Debian and Debian-like philosophies is that if the upstream of a package fixes a security issue and pushes it to their users, Debian often remains unaware of it and will not include the fix in their own package unless it is documented or assigned a CVE. As a result, users remain vulnerable for up to maybe entire five years.

Another issue is the increased complexity in the chain of delivery. The more people who can add, remove, or manipulate the code, the more trust becomes a concern. If the code goes from developer X to intermediary Y (or even more intermediaries) before reaching the user, then the user must trust not only X but also Y and anyone else in the chain. Moreover, X doesn&#39;t know Y or their practices, so X must also trust Y not to tamper with the code. This design introduces unnecessary trust assumptions. Code must be delivered directly from X to the user.

Note: Operating system developers should only interact with core/system-level packages, such as the kernel or desktop environment or VM configs or so.
 
# System VS User Packages

System packages: Are going to be immutable, meaning read-only, no ability to modify with any rights (This helps as well with [Verified Boot](https://www.kicksecure.com/wiki/Verified_Boot)). 

User packages: Will always be kept up to date. 

# Kernel (user)/App-per-VM (ApV)

Realistically, having pure packages working directly with seL4 is not practical. It could take 10 to 20 years or even longer. (Linux has been around for over 30 years, and there are still packages that are Windows-only.)

So to solve this issue, we gonna use an already functional kernel which is linux!.. ok hold on a second didnt we just say that linux is a bad design? Thats correct if its used as the main operating system kernel, but if its used in a VM and that VM runs only a single application like firefox or thunderbird..etc the danger drastically decreased/minimized. 

Note: AppArmor, SELinux, Firejail, Containers.. all are flawed designs when it comes to relying on them for security with packages running on Linux directly on hardware.

# VM per Package per User (compartmentalization)

Each VM will run at the user level, and every VM will have its own dedicated user account. This isolation ensures that if a VM is compromised, it won’t lead to the compromise of all user packages or affect other VMs.

# Default Block All

By default, when any app is installed in the VM, nothing is allowed automatically. Every permission including internet access must be explicitly granted by the user. This approach prevents any unwanted permissions from being applied silently without the user&#39;s notice or consent.

# No Backward Nor Sideward compatibility

No Backward: The operating system will continue updating itself for supported XYZ hardware. Once any hardware becomes obsolete, it will no longer be compatible, no legacy support.

No Sideward: There will be no compatibility for Linux, Windows, or BSD software at the system level. Compatibility may exist in App-per-VM. By default, only Linux apps are supported.

Additionally, if any app running in a VM does not work with a specific Linux version or hardware architecture, it is not the operating system’s responsibility to ensure compatibility (upstream issue).

# Packages Source (App-per-VM)

One might say that hosting our own packages on our own servers would be the ideal solution, and that’s true. However, with a small team and limited resources, that’s not currently feasible (though it remains the long-term goal).

What we can do instead is source packages from existing systems, whether Gentoo, Arch, Nix, or others as long as we can obtain pure, upstream, patchless packages. Reproducibility is essential here to ensure that the packages have not been tampered with.

Note: We can also support App(per-VM) rollback, or install older version directly, since these packages already exists in these OSs repository.

This approach doesn&#39;t conflict with the core philosophy of keep it updated, as the primary focus remains on using updated software, not rollbacks.

# App-per-VM Hypervisor type

Type 1 (bare-metal) hypervisors will be used for minimalism, reduced attack surface, and better performance.

seL4 provides [libsel4vm](https://docs.sel4.systems/projects/virtualization/docs/libsel4vm.html), which fits well with this design. 

# Package Manager Security

All package delivery must comply with [TUF](https://theupdateframework.io/docs/overview/), meaning delivery path of the packages must be secured without the depends on TLS to do that. 

Note: This level of security is not fully implemented by any existing package manager that I’m aware of. However, it can be enforced when using our own packages, especially in the App-per-VM model.

# Bootstrappability

I think this is possible, since the OS will be with minimal packages (as a system level). [[ref](https://www.kicksecure.com/wiki/Dev/bootstrappable_builds)]

# Wayland only

There wont be x11/xorg nor xwayland, either wayland or no land.

# No Rescue mode

Rescue mode is like giving a backdoor to your own OS or software. If you break your system or forget your password, it’s your responsibility, no one else&#39;s and no help will be provided, because there’s nothing anyone can do.

This also encourages users to maintain proper backups of their data, whether on their own hardware or in the cloud.

(Rollback and Snapshots helps as well)

# Architecture &amp; CPU Support

Only x86 will be supported, due to its widespread use (Intel or AMD CPUs). Support may be extended in the future to other freedom (or almost freedom) based architectures, such as RISC-V.

ARM or similar proprietary architectures will not be supported—there’s no reason to waste time on them. Supporting the most common proprietary architecture (x86) is sufficient. (Though seL4 supports ARM).

# No Stupid or OLD Devices Support

There wont be any old or nonsense software support in the system level (like IRC in the kernel?! or Floppy Disk Support..)

If necessary, such support may be possible within the App-per-VM (ApV) model, since it&#39;s based on Linux and already includes support for these kinds of legacy features. However, this will never be a priority.

# Only Latest/Best Encryption Used

Since there will be no backward compatibility, only the best and most secure options available will be used, whether in TLS versions, cipher suites, OS-level encryption, or any other security-related components.

# Offline Installation

It is more secure to avoid installing the operating system while connected to the internet, as also advised in [Debian’s security manual](https://www.debian.org/doc/manuals/securing-debian-manual/ch03s03.en.html). 

# Offline System Core

Similar to Qubes OS, the system core/base will not be connected to the internet (essential for security purposes). 

# Non-Systemd Init 

Although not a direct security issue on its own, systemd is a bulky piece of software and has been [heavily criticized](https://without-systemd.org/wiki/index_php/Arguments_against_systemd/) for numerous things. The good news is that Genode OS has developed its own lightweight [init component](https://genode.org/documentation/genode-foundations/21.05/system_configuration/The_init_component.html) that works with seL4.

# Optional Preferable 

### Btrfs/Snapshots/Timeshift like 

It should be easily to achieve this with immutable upgrades (you can rollback to the previous state).

### Server Support

Finding a way to make ApV able to manage server/s. 

### FSDG Consideration

This all can go through only supporting freedom software (software for the ApV must be taken from FSDG distro repository in this case).

### Secureboot

Only makes sense when it doesnt depend on microsoft keys. 

### Onion Repository

Will harden the avoidance of targeted attack ([explained here](https://www.kicksecure.com/wiki/Onionizing_Repositories#Introduction)).

### Nested Virtualization 

This feature will be the responsibility of the seL4 team, whether they implement it correctly and securely or not. It’s particularly relevant in scenarios involving running an OS + VM inside another VM, or using a virtualizer/hypervisor within a VM (e.g. VirtualBox-in-VM).

# Competitors 

Proprietary competitors are on the rise. HarmonyOS, for example, is arguably the most mature general-purpose microkernel-based OS developed in China. Google’s Fuchsia is another example. If we don’t stay ahead of these developments, control over security will slip from our hands, placing it instead in the hands of large corporations or state-backed entities.</description>
    
    <lastBuildDate>Tue, 22 Jul 2025 23:15:04 +0000</lastBuildDate>
    <category>Development</category>
    <atom:link href="https://forums.kicksecure.com/t/operating-system-from-heaven/1153.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Operating System from Heaven</title>
        <dc:creator><![CDATA[arraybolt3]]></dc:creator>
        <description><![CDATA[
            <p>Could you elaborate on how this is particularly more secure than Qubes OS? I don’t think seL4 will be very suitable for this because of its likely very lacking hardware support (unless there’s an army of developers making networking and graphics drivers for seL4 that I don’t know about). Xen + a Linux dom0 seems like it probably gives similar levels of security to this.</p>
<p>Genode looks really cool, I didn’t know about it before. (Edit: Heh, looks like they’re using separate Linux VMs as both hardware and an application compatibility layers. Clever.)</p>
          <p><a href="https://forums.kicksecure.com/t/operating-system-from-heaven/1153/2">Read full topic</a></p>
        ]]></description>
        <link>https://forums.kicksecure.com/t/operating-system-from-heaven/1153/2</link>
        <pubDate>Tue, 22 Jul 2025 23:15:04 +0000</pubDate>
        <guid isPermaLink="false">forums.kicksecure.com-post-1153-2</guid>
        <source url="https://forums.kicksecure.com/t/operating-system-from-heaven/1153.rss">Operating System from Heaven</source>
      </item>
      <item>
        <title>Operating System from Heaven</title>
        <dc:creator><![CDATA[nurmagoz]]></dc:creator>
        <description><![CDATA[
            <p>Based on my past experience with operating systems and software, there is still no great secure operating system developed, especially one based on free software. Most of the necessary software exists, but the challenge lies in integrating it all into a cohesive whole to produce the most secure operating system.</p>
<p>What I will add here are software that already exist in reality, not theoretical ones.</p>
<h1><a name="p-2980-kernel-system-1" class="anchor" href="https://forums.kicksecure.com#p-2980-kernel-system-1"></a>Kernel (system)</h1>
<p>Sadly, there is no reliable or usable freedom operating system based on a microkernel design. What we have are only monolithic ones, based on the Linux kernel.</p>
<p>Linux, by design, does not offer the same level of security as a microkernel. <a href="https://en.wikipedia.org/wiki/Tanenbaum%E2%80%93Torvalds_debate#Continued_dialogue">It is considered obsolete</a>; nobody would want to build an operating system from scratch based on a monolithic design in nowadays.</p>
<p>Alternatives?</p>
<ul>
<li><a href="https://sel4.systems/">Sel4</a></li>
<li><a href="https://doc.redox-os.org/book/microkernels.html">Redox</a></li>
<li><a href="https://fuchsia.dev/fuchsia-src/concepts/kernel">Zircon</a></li>
</ul>
<p>All mentioned are in active development and free software (sel4 is copyleft).</p>
<p>What i would avoid for sure is Zircon, because its google based.</p>
<p>What’s left are seL4 and Redox. Both are good, and if I had to choose one, I would choose seL4 due to its maturity.</p>
<p>Note (1): Minix and GNUmach are inactive.<br>
Note (2): Hybrid kernel is not an option.</p>
<h1><a name="p-2980-packages-policy-2" class="anchor" href="https://forums.kicksecure.com#p-2980-packages-policy-2"></a>Packages Policy</h1>
<p>The package is only going to be as secure and up-to-date as the upstream developers made it. There must be no interference or external involvement in adding or removing code from any package (no package maintainer).</p>
<h3><a name="p-2980-why-3" class="anchor" href="https://forums.kicksecure.com#p-2980-why-3"></a>Why</h3>
<p>We have the Debian design, and we’ve seen how flawed it is when it comes to security and feature fixes. It’s horrible in every aspect. What we get from Debian is, at best, working software, but that doesn’t mean it’s secure, up-to-date, or even stable. Issues like packages crashing on shutdown when clicking X or freezing on specific Y action, are common, and such bugs when occurs are unlikely to be addressed in a timely manner.</p>
<p>A major security flaw in Debian and Debian-like philosophies is that if the upstream of a package fixes a security issue and pushes it to their users, Debian often remains unaware of it and will not include the fix in their own package unless it is documented or assigned a CVE. As a result, users remain vulnerable for up to maybe entire five years.</p>
<p>Another issue is the increased complexity in the chain of delivery. The more people who can add, remove, or manipulate the code, the more trust becomes a concern. If the code goes from developer X to intermediary Y (or even more intermediaries) before reaching the user, then the user must trust not only X but also Y and anyone else in the chain. Moreover, X doesn’t know Y or their practices, so X must also trust Y not to tamper with the code. This design introduces unnecessary trust assumptions. Code must be delivered directly from X to the user.</p>
<p>Note: Operating system developers should only interact with core/system-level packages, such as the kernel or desktop environment or VM configs or so.</p>
<h1><a name="p-2980-system-vs-user-packages-4" class="anchor" href="https://forums.kicksecure.com#p-2980-system-vs-user-packages-4"></a>System VS User Packages</h1>
<p>System packages: Are going to be immutable, meaning read-only, no ability to modify with any rights (This helps as well with <a href="https://www.kicksecure.com/wiki/Verified_Boot">Verified Boot</a>).</p>
<p>User packages: Will always be kept up to date.</p>
<h1><a name="p-2980-kernel-userapp-per-vm-apv-5" class="anchor" href="https://forums.kicksecure.com#p-2980-kernel-userapp-per-vm-apv-5"></a>Kernel (user)/App-per-VM (ApV)</h1>
<p>Realistically, having pure packages working directly with seL4 is not practical. It could take 10 to 20 years or even longer. (Linux has been around for over 30 years, and there are still packages that are Windows-only.)</p>
<p>So to solve this issue, we gonna use an already functional kernel which is linux!.. ok hold on a second didnt we just say that linux is a bad design? Thats correct if its used as the main operating system kernel, but if its used in a VM and that VM runs only a single application like firefox or thunderbird…etc the danger drastically decreased/minimized.</p>
<p>Note: AppArmor, SELinux, Firejail, Containers… all are flawed designs when it comes to relying on them for security with packages running on Linux directly on hardware.</p>
<h1><a name="p-2980-vm-per-package-per-user-compartmentalization-6" class="anchor" href="https://forums.kicksecure.com#p-2980-vm-per-package-per-user-compartmentalization-6"></a>VM per Package per User (compartmentalization)</h1>
<p>Each VM will run at the user level, and every VM will have its own dedicated user account. This isolation ensures that if a VM is compromised, it won’t lead to the compromise of all user packages or affect other VMs.</p>
<h1><a name="p-2980-default-block-all-7" class="anchor" href="https://forums.kicksecure.com#p-2980-default-block-all-7"></a>Default Block All</h1>
<p>By default, when any app is installed in the VM, nothing is allowed automatically. Every permission including internet access must be explicitly granted by the user. This approach prevents any unwanted permissions from being applied silently without the user’s notice or consent.</p>
<h1><a name="p-2980-no-backward-nor-sideward-compatibility-8" class="anchor" href="https://forums.kicksecure.com#p-2980-no-backward-nor-sideward-compatibility-8"></a>No Backward Nor Sideward compatibility</h1>
<p>No Backward: The operating system will continue updating itself for supported XYZ hardware. Once any hardware becomes obsolete, it will no longer be compatible, no legacy support.</p>
<p>No Sideward: There will be no compatibility for Linux, Windows, or BSD software at the system level. Compatibility may exist in App-per-VM. By default, only Linux apps are supported.</p>
<p>Additionally, if any app running in a VM does not work with a specific Linux version or hardware architecture, it is not the operating system’s responsibility to ensure compatibility (upstream issue).</p>
<h1><a name="p-2980-packages-source-app-per-vm-9" class="anchor" href="https://forums.kicksecure.com#p-2980-packages-source-app-per-vm-9"></a>Packages Source (App-per-VM)</h1>
<p>One might say that hosting our own packages on our own servers would be the ideal solution, and that’s true. However, with a small team and limited resources, that’s not currently feasible (though it remains the long-term goal).</p>
<p>What we can do instead is source packages from existing systems, whether Gentoo, Arch, Nix, or others as long as we can obtain pure, upstream, patchless packages. Reproducibility is essential here to ensure that the packages have not been tampered with.</p>
<p>Note: We can also support App(per-VM) rollback, or install older version directly, since these packages already exists in these OSs repository.</p>
<p>This approach doesn’t conflict with the core philosophy of keep it updated, as the primary focus remains on using updated software, not rollbacks.</p>
<h1><a name="p-2980-app-per-vm-hypervisor-type-10" class="anchor" href="https://forums.kicksecure.com#p-2980-app-per-vm-hypervisor-type-10"></a>App-per-VM Hypervisor type</h1>
<p>Type 1 (bare-metal) hypervisors will be used for minimalism, reduced attack surface, and better performance.</p>
<p>seL4 provides <a href="https://docs.sel4.systems/projects/virtualization/docs/libsel4vm.html">libsel4vm</a>, which fits well with this design.</p>
<h1><a name="p-2980-package-manager-security-11" class="anchor" href="https://forums.kicksecure.com#p-2980-package-manager-security-11"></a>Package Manager Security</h1>
<p>All package delivery must comply with <a href="https://theupdateframework.io/docs/overview/">TUF</a>, meaning delivery path of the packages must be secured without the depends on TLS to do that.</p>
<p>Note: This level of security is not fully implemented by any existing package manager that I’m aware of. However, it can be enforced when using our own packages, especially in the App-per-VM model.</p>
<h1><a name="p-2980-bootstrappability-12" class="anchor" href="https://forums.kicksecure.com#p-2980-bootstrappability-12"></a>Bootstrappability</h1>
<p>I think this is possible, since the OS will be with minimal packages (as a system level). [<a href="https://www.kicksecure.com/wiki/Dev/bootstrappable_builds">ref</a>]</p>
<h1><a name="p-2980-wayland-only-13" class="anchor" href="https://forums.kicksecure.com#p-2980-wayland-only-13"></a>Wayland only</h1>
<p>There wont be x11/xorg nor xwayland, either wayland or no land.</p>
<h1><a name="p-2980-no-rescue-mode-14" class="anchor" href="https://forums.kicksecure.com#p-2980-no-rescue-mode-14"></a>No Rescue mode</h1>
<p>Rescue mode is like giving a backdoor to your own OS or software. If you break your system or forget your password, it’s your responsibility, no one else’s and no help will be provided, because there’s nothing anyone can do.</p>
<p>This also encourages users to maintain proper backups of their data, whether on their own hardware or in the cloud.</p>
<p>(Rollback and Snapshots helps as well)</p>
<h1><a name="p-2980-architecture-cpu-support-15" class="anchor" href="https://forums.kicksecure.com#p-2980-architecture-cpu-support-15"></a>Architecture &amp; CPU Support</h1>
<p>Only x86 will be supported, due to its widespread use (Intel or AMD CPUs). Support may be extended in the future to other freedom (or almost freedom) based architectures, such as RISC-V.</p>
<p>ARM or similar proprietary architectures will not be supported—there’s no reason to waste time on them. Supporting the most common proprietary architecture (x86) is sufficient. (Though seL4 supports ARM).</p>
<h1><a name="p-2980-no-stupid-or-old-devices-support-16" class="anchor" href="https://forums.kicksecure.com#p-2980-no-stupid-or-old-devices-support-16"></a>No Stupid or OLD Devices Support</h1>
<p>There wont be any old or nonsense software support in the system level (like IRC in the kernel?! or Floppy Disk Support…)</p>
<p>If necessary, such support may be possible within the App-per-VM (ApV) model, since it’s based on Linux and already includes support for these kinds of legacy features. However, this will never be a priority.</p>
<h1><a name="p-2980-only-latestbest-encryption-used-17" class="anchor" href="https://forums.kicksecure.com#p-2980-only-latestbest-encryption-used-17"></a>Only Latest/Best Encryption Used</h1>
<p>Since there will be no backward compatibility, only the best and most secure options available will be used, whether in TLS versions, cipher suites, OS-level encryption, or any other security-related components.</p>
<h1><a name="p-2980-offline-installation-18" class="anchor" href="https://forums.kicksecure.com#p-2980-offline-installation-18"></a>Offline Installation</h1>
<p>It is more secure to avoid installing the operating system while connected to the internet, as also advised in <a href="https://www.debian.org/doc/manuals/securing-debian-manual/ch03s03.en.html">Debian’s security manual</a>.</p>
<h1><a name="p-2980-offline-system-core-19" class="anchor" href="https://forums.kicksecure.com#p-2980-offline-system-core-19"></a>Offline System Core</h1>
<p>Similar to Qubes OS, the system core/base will not be connected to the internet (essential for security purposes).</p>
<h1><a name="p-2980-non-systemd-init-20" class="anchor" href="https://forums.kicksecure.com#p-2980-non-systemd-init-20"></a>Non-Systemd Init</h1>
<p>Although not a direct security issue on its own, systemd is a bulky piece of software and has been <a href="https://without-systemd.org/wiki/index_php/Arguments_against_systemd/">heavily criticized</a> for numerous things. The good news is that Genode OS has developed its own lightweight <a href="https://genode.org/documentation/genode-foundations/21.05/system_configuration/The_init_component.html">init component</a> that works with seL4.</p>
<h1><a name="p-2980-optional-preferable-21" class="anchor" href="https://forums.kicksecure.com#p-2980-optional-preferable-21"></a>Optional Preferable</h1>
<h3><a name="p-2980-btrfssnapshotstimeshift-like-22" class="anchor" href="https://forums.kicksecure.com#p-2980-btrfssnapshotstimeshift-like-22"></a>Btrfs/Snapshots/Timeshift like</h3>
<p>It should be easily to achieve this with immutable upgrades (you can rollback to the previous state).</p>
<h3><a name="p-2980-server-support-23" class="anchor" href="https://forums.kicksecure.com#p-2980-server-support-23"></a>Server Support</h3>
<p>Finding a way to make ApV able to manage server/s.</p>
<h3><a name="p-2980-fsdg-consideration-24" class="anchor" href="https://forums.kicksecure.com#p-2980-fsdg-consideration-24"></a>FSDG Consideration</h3>
<p>This all can go through only supporting freedom software (software for the ApV must be taken from FSDG distro repository in this case).</p>
<h3><a name="p-2980-secureboot-25" class="anchor" href="https://forums.kicksecure.com#p-2980-secureboot-25"></a>Secureboot</h3>
<p>Only makes sense when it doesnt depend on microsoft keys.</p>
<h3><a name="p-2980-onion-repository-26" class="anchor" href="https://forums.kicksecure.com#p-2980-onion-repository-26"></a>Onion Repository</h3>
<p>Will harden the avoidance of targeted attack (<a href="https://www.kicksecure.com/wiki/Onionizing_Repositories#Introduction">explained here</a>).</p>
<h3><a name="p-2980-nested-virtualization-27" class="anchor" href="https://forums.kicksecure.com#p-2980-nested-virtualization-27"></a>Nested Virtualization</h3>
<p>This feature will be the responsibility of the seL4 team, whether they implement it correctly and securely or not. It’s particularly relevant in scenarios involving running an OS + VM inside another VM, or using a virtualizer/hypervisor within a VM (e.g. VirtualBox-in-VM).</p>
<h1><a name="p-2980-competitors-28" class="anchor" href="https://forums.kicksecure.com#p-2980-competitors-28"></a>Competitors</h1>
<p>Proprietary competitors are on the rise. HarmonyOS, for example, is arguably the most mature general-purpose microkernel-based OS developed in China. Google’s Fuchsia is another example. If we don’t stay ahead of these developments, control over security will slip from our hands, placing it instead in the hands of large corporations or state-backed entities.</p>
          <p><a href="https://forums.kicksecure.com/t/operating-system-from-heaven/1153/1">Read full topic</a></p>
        ]]></description>
        <link>https://forums.kicksecure.com/t/operating-system-from-heaven/1153/1</link>
        <pubDate>Tue, 22 Jul 2025 20:51:03 +0000</pubDate>
        <guid isPermaLink="false">forums.kicksecure.com-post-1153-1</guid>
        <source url="https://forums.kicksecure.com/t/operating-system-from-heaven/1153.rss">Operating System from Heaven</source>
      </item>
  </channel>
</rss>
