<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Dracut compression research</title>
    <link>https://forums.kicksecure.com/t/dracut-compression-research/1131</link>
    <description>Patrick asked me to look into the compression options offered by Dracut for initramfs compression. This is the results of that research, written here since the results are a bit lengthy and require the ability to post images for sharing the charts I made.

**tl;dr: I think we should use xz compression. It&#39;s acceptably fast, it compresses way better, and there doesn&#39;t seem to be any compelling reason to avoid it.**

The initramfs has to be decompressed by the kernel on boot, so I only researched compression algorithms supported by the kernel in Debian Bookworm. (Trixie supports the exact same compression algorithms, so this research should apply to Trixie as well, assuming the compression utilities perform similarly in Trixie to how they perform in Bookworm, which I find likely given the age of these utilities.)

Bookworm&#39;s kernel and Dracut both support the following compression algorithms:

* gzip (this is what we&#39;re using now)
* lz4
* lzma
* lzo
* xz
* zstd
* cat (uncompressed, taken into consideration to provide a best-case scenario for time and a worst-case scenario for size)

Dracut also supports bzip2, but Bookworm&#39;s and Trixie&#39;s kernels both did not appear to support that.

To determine which algorithm was most likely desirable, I benchmarked them against each other. The following testing methodology was used:

* Create a file, `/etc/dracut.conf.d/99-compress.conf` to set the compression algorithm in.
* For each compression algorithm, change `99-compress.conf` to specify the desired algorithm, then run `time sudo dracut --force` three times.
* Record the output of `time` after each dracut invocation.
* Record the size of the output initramfs after each dracut invocation.

In all instances, the file size of the output initramfs was identical (to within a kilobyte at least) across all three runs of Dracut when using a single compression algorithm, so I only recorded file size once per algorithm. All tests were run in a KVM/QEMU virtual machine with 4 virtual CPUs, 4 GB RAM, and all host CPU features passed through to the guest (`-cpu host`). The host system has an i9-14900HX processor. The raw results of the benchmarks are as follows:

* gzip
  * run 1: `0.06s user 0.10s system 1% cpu 12.240 total`
  * run 2: `0.01s user 0.02s system 0% cpu 10.907 total`
  * run 3: `0.01s user 0.02s system 0% cpu 10.912 total`
  * file size: `39724K`
* lz4
  * run 1: `0.02s user 0.01s system 0% cpu 7.476 total`
  * run 2: `0.02s user 0.01s system 0% cpu 7.408 total`
  * run 3: `0.01s user 0.02s system 0% cpu 7.541 total`
  * file size: `48064K`
* lzma
  * run 1: `0.09s user 0.07s system 0% cpu 46.595 total`
  * run 2: `0.01s user 0.02s system 0% cpu 45.677 total`
  * run 3: `0.02s user 0.01s system 0% cpu 45.339 total`
  * file size: `26292K`
* lzop
  * run 1: `0.09s user 0.08s system 0% cpu 38.810 total`
  * run 2: `0.02s user 0.01s system 0% cpu 37.862 total`
  * run 3: `0.01s user 0.02s system 0% cpu 37.837 total`
  * file size: `44880K`
* xz
  * run 1: `0.09s user 0.08s system 1% cpu 11.655 total`
  * run 2: `0.01s user 0.01s system 0% cpu 10.542 total`
  * run 3: `0.02s user 0.01s system 0% cpu 10.571 total`
  * file size: `28288K`
* zstd
  * run 1: `0.10s user 0.07s system 1% cpu 8.676 total`
  * run 2: `0.08s user 0.09s system 2% cpu 7.680 total`
  * run 3: `0.01s user 0.01s system 0% cpu 7.404 total`
  * file size: `33248K`
* cat (no compression, baseline)
  * run 1: `0.09s user 0.08s system 3% cpu 5.279 total`
  * run 2: `0.01s user 0.02s system 0% cpu 4.189 total`
  * run 3: `0.01s user 0.02s system 0% cpu 4.252 total`
  * file size: `136088K`

I did not benchmark boot speed with each of the different algorithms used, although I did verify that the virtual machine booted with an initramfs made with each algorithm. The boot speed seemed pretty much the same to me with each algorithm, and would have been difficult to measure in an objective, reliable fashion. I will note, I may have noticed a very slight speedup during boot with the zstd algorithm.

The following two graphs are provided to visualize the data above (created using LibreOffice):

![initramfs-gen-speed|605x340](upload://xgqxRhWowoHkhwQKDySGIr6PCzI.png)

![initramfs-gen-efficiency|605x340](upload://6fF02CNFpWuQxjjDkTxl0imYZz4.png)

Takeaways from the above data:

* From a size standpoint, lzma performed the best, lz4 performed the worst.
* From a speed standpoint, zstd and lz4 are about tied for best speed, while lzma is the worst for speed.
* lzo/lzop is certainly a bad choice - it approaches lzma in slowness while also making a file larger than gzip and almost as large as lz4. It&#39;s the worst of all worlds combined.
* xz is probably the most compelling as far as a balance between good speed and good compression - it&#39;s almost as good as lzma as far as size, while being just a hair faster than gzip.
* zstd is a bit of an improvement over gzip in size, while also being very very fast.

I am of the opinion that xz is the best choice here based on this data, as our existing compression speed has been acceptable and shaving off 2-3 seconds per initramfs generation doesn&#39;t seem that compelling except perhaps when doing ARM builds of Kicksecure on x86_64 hardware.

It is worth noting, people who know much more about compression tools under the hood than I do have complaints about design flaws in xz, which are documented [here](https://www.nongnu.org/lzip/xz_inadequate.html). I do not believe the issues mentioned in this article are of concern for the following reasons:

* The article primarily relates to xz&#39;s suitability for long-term archival. Kernel initramfs files aren&#39;t really something where &quot;long-term archival&quot; is a concern.
* Most of the article focuses on xz&#39;s lack of resiliency in the face of partial archive corruption. But we don&#39;t care about this at all, we assume the initramfs is bit-for-bit identical to when it was created, and indeed in the future we will likely be signing the initramfs as part of Verified Boot (which will mandate that the initramfs be bit-for-bit idential to when it was created).
* Other parts of the article focus on compatibility issues with different versions of xz. This also is not a concern - as long as dracut produces an initramfs that the Linux kernel can read and boot with, things are compatible enough for us.
* The rest of the article appears to focus on various design decisions in xz that could have been made better. None of that is relevant for us though, since whatever feature set Dracut is using in xz is good enough to give it a very acceptable compression speed while also providing the second-smallest file size of any of the compression algorithms documented here. Even if xz could be better than it is, right now it&#39;s better than everything else except maybe zstd if you really care about speed.

Someone else I saw did [similar compression performance benchmarking](https://linuxreviews.org/Comparison_of_Compression_Algorithms) and concluded that `zstd` was the best general-purpose algorithm, though the data they present shows that parallel xz actually performed better than zstd&#39;s best compression in both compression size and speed. One concerning thing this article does point out though is that xz can use a lot of RAM. For this reason, I tried generating a dracut initramfs using xz compression in a Kicksecure-CLI VirtualBox VM with only 512 MB RAM. Memory consumption during the initramfs generation rose to a maximum of 318M according to htop, and went down to 263M once the initramfs was generated, meaning that dracut and whatever tools it ran (including xz) used about 55M of memory during the generation process. Only about 1.97M of swap ended up used. This is much more than both gzip and zstd (which both only require about 5M of memory), but seems acceptable to me. 55M is not that much, especially given that `fwupd` is just sitting there eating 97M while doing basically nothing.

As a final note, I checked cve.org to see if security vulnerabilities were found in either the xz or zstd compressors in the Linux kernel. I found no vulnerabilities for either algorithm (using the search terms &quot;linuz kernel xz&quot; and &quot;linux kernel zstd&quot;).

In conclusion, I believe xz is the best compression method for us to use with dracut, due to its slightly better performance and much better compression compared to our current default, gzip. zstd is my second choice, and may be what we want to use if we have problems with xz&#39;s speed or memory consumption.</description>
    
    <lastBuildDate>Fri, 11 Jul 2025 23:22:07 +0000</lastBuildDate>
    <category>Development</category>
    <atom:link href="https://forums.kicksecure.com/t/dracut-compression-research/1131.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Dracut compression research</title>
        <dc:creator><![CDATA[arraybolt3]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="nurmagoz" data-post="4" data-topic="1131">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://forums.kicksecure.com/letter_avatar_proxy/v4/letter/n/8e7dd6/48.png" class="avatar"> nurmagoz:</div>
<blockquote>
<p>It was done as change everything to zstd:</p>
</blockquote>
</aside>
<p>OK, good to know.</p>
<aside class="quote no-group" data-username="nurmagoz" data-post="4" data-topic="1131">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://forums.kicksecure.com/letter_avatar_proxy/v4/letter/n/8e7dd6/48.png" class="avatar"> nurmagoz:</div>
<blockquote>
<p>Lol yeah thought about that from this perspective, but if we come to the linux kernel itself, these companies hands already there anyway (intel,nvidia…etc). So we go with the free software or not (and reliably secure) regardless the source from where, otherwise its a lost case.</p>
</blockquote>
</aside>
<p>Indeed, I made that comment mostly as a joke, thus the “:P”.</p>
<aside class="quote no-group" data-username="nurmagoz" data-post="4" data-topic="1131">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://forums.kicksecure.com/letter_avatar_proxy/v4/letter/n/8e7dd6/48.png" class="avatar"> nurmagoz:</div>
<blockquote>
<p>Yeah guess who discovered xz backdoor? not a debian maintainer or so, but a microsoft engineer…</p>
</blockquote>
</aside>
<p>The XZ backdoor never affected any stable release of Debian, because Debian doesn’t introduce new versions of software into older releases. So while the backdoor was not discovered by Debian, Debian did a very good job of defending the vast majority of their users from it even before it was known to be a thing.</p>
<aside class="quote no-group" data-username="nurmagoz" data-post="4" data-topic="1131">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://forums.kicksecure.com/letter_avatar_proxy/v4/letter/n/8e7dd6/48.png" class="avatar"> nurmagoz:</div>
<blockquote>
<p>So if there are no big issues with zstd + debian, i dont see it a bad choice imho.</p>
</blockquote>
</aside>
<p>I believe I pointed out a potential issue when mentioning overly large initramfs files causing boot failures on some machines. Is it a <em>big</em> issue? I guess that depends, but I know from experience that there are systems that, when faced with certain kernel drivers, will fail to boot with an initramfs compressed with a less efficient algorithm, and will succeed booting when that same initramfs is compressed with xz.</p>
          <p><a href="https://forums.kicksecure.com/t/dracut-compression-research/1131/5">Read full topic</a></p>
        ]]></description>
        <link>https://forums.kicksecure.com/t/dracut-compression-research/1131/5</link>
        <pubDate>Fri, 11 Jul 2025 23:22:07 +0000</pubDate>
        <guid isPermaLink="false">forums.kicksecure.com-post-1131-5</guid>
        <source url="https://forums.kicksecure.com/t/dracut-compression-research/1131.rss">Dracut compression research</source>
      </item>
      <item>
        <title>Dracut compression research</title>
        <dc:creator><![CDATA[nurmagoz]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="arraybolt3" data-post="3" data-topic="1131">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://forums.kicksecure.com/user_avatar/forums.kicksecure.com/arraybolt3/48/88_2.png" class="avatar"> arraybolt3:</div>
<blockquote>
<p>The initramfs use case is substantially different - size is<br>
more important than speed (to a point) because a too-big initramfs might<br>
fail to boot entirely.</p>
</blockquote>
</aside>
<p>It was done as change everything to zstd:</p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://www.phoronix.com/news/Fedora-43-Initrd-Zstd-Compress">
  <header class="source">
      <img src="https://www.phoronix.com/favicon.ico" class="site-icon" width="48" height="48">

      <a href="https://www.phoronix.com/news/Fedora-43-Initrd-Zstd-Compress" target="_blank" rel="noopener">phoronix.com</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:554/185;"><img src="https://www.phoronix.net/image.php?id=2025&amp;image=initrd_zstd" class="thumbnail" width="554" height="185"></div>

<h3><a href="https://www.phoronix.com/news/Fedora-43-Initrd-Zstd-Compress" target="_blank" rel="noopener">Fedora 43 Looks To Zstd-Compressed Initrd By Default For Space Savings &amp;...</a></h3>

  <p>A change proposal has been raised to compress the initrd by default using Zstd compression rather than XZ</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<aside class="quote no-group" data-username="arraybolt3" data-post="3" data-topic="1131">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://forums.kicksecure.com/user_avatar/forums.kicksecure.com/arraybolt3/48/88_2.png" class="avatar"> arraybolt3:</div>
<blockquote>
<p>(Arguably it’s in a good position to be backdoored by a<br>
nation-state too, but that depends on how much you trust Meta I guess :P)</p>
</blockquote>
</aside>
<p>Lol yeah thought about that from this perspective, but if we come to the linux kernel itself, these companies hands already there anyway (intel,nvidia…etc). So we go with the free software or not (and reliably secure) regardless the source from where, otherwise its a lost case.</p>
<aside class="quote no-group" data-username="arraybolt3" data-post="3" data-topic="1131">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://forums.kicksecure.com/user_avatar/forums.kicksecure.com/arraybolt3/48/88_2.png" class="avatar"> arraybolt3:</div>
<blockquote>
<p>Debian will be<br>
responsible for keeping it safe and maintained at that point</p>
</blockquote>
</aside>
<p>Yeah guess who discovered xz backdoor? not a debian maintainer or so, but a microsoft engineer…</p>
<p>So if there are no big issues with zstd + debian, i dont see it a bad choice imho.</p>
          <p><a href="https://forums.kicksecure.com/t/dracut-compression-research/1131/4">Read full topic</a></p>
        ]]></description>
        <link>https://forums.kicksecure.com/t/dracut-compression-research/1131/4</link>
        <pubDate>Fri, 11 Jul 2025 23:07:37 +0000</pubDate>
        <guid isPermaLink="false">forums.kicksecure.com-post-1131-4</guid>
        <source url="https://forums.kicksecure.com/t/dracut-compression-research/1131.rss">Dracut compression research</source>
      </item>
      <item>
        <title>Dracut compression research</title>
        <dc:creator><![CDATA[arraybolt3]]></dc:creator>
        <description><![CDATA[
            <p>It’s worth noting that Fedora switched to zstd specifically for RPM<br>
compression. The initramfs use case is substantially different - size is<br>
more important than speed (to a point) because a too-big initramfs might<br>
fail to boot entirely. This may become a real risk once we start using<br>
Dracut’s “sloppy hostonly” improvements, which include a lot more kernel<br>
modules and thus increase the size of the initramfs. The performance impact<br>
of zstd is benchmarked for initramfs compression above, and the impact is<br>
arguably negligible.</p>
<p>We shouldn’t let XZ’s reputation be tarnished after the xz-utils backdoor,<br>
in my opinion. The attack’s level of sophistication was high enough that I<br>
doubt most people would have handled things any better than the primary<br>
maintainer did, and after this experience I don’t believe he’ll make the<br>
same mistakes again. XZ’s source code is, to the best of our knowledge,<br>
clean currently, so I don’t believe the attack is a good reason to avoid it.</p>
<p>As for the Nebraska issue, that is a real problem. Zstd has the full force<br>
of Facebook backing it up, so it’s in a much better position to remain<br>
maintained. (Arguably it’s in a good position to be backdoored by a<br>
nation-state too, but that depends on how much you trust Meta I guess :P)<br>
That being said, as long as xz works reliably for initramfs compression<br>
when Debian 13 rolls around, I don’t see an issue - Debian will be<br>
responsible for keeping it safe and maintained at that point, and we can<br>
change our minds for a future release of Kicksecure. If we were using a<br>
rolling form of Debian, I’d probably pick zstd due to this concern, but<br>
since we’re using stable releases, I don’t see any substantial danger in<br>
using xz.</p>
          <p><a href="https://forums.kicksecure.com/t/dracut-compression-research/1131/3">Read full topic</a></p>
        ]]></description>
        <link>https://forums.kicksecure.com/t/dracut-compression-research/1131/3</link>
        <pubDate>Fri, 11 Jul 2025 18:10:22 +0000</pubDate>
        <guid isPermaLink="false">forums.kicksecure.com-post-1131-3</guid>
        <source url="https://forums.kicksecure.com/t/dracut-compression-research/1131.rss">Dracut compression research</source>
      </item>
      <item>
        <title>Dracut compression research</title>
        <dc:creator><![CDATA[nurmagoz]]></dc:creator>
        <description><![CDATA[
            <p>Fedora were using xz and done the comparison of xz VS zstd, the conclusion reached is that zstd overall will give better performance for the users:</p>
<p><a href="https://fedoraproject.org/wiki/Changes/Switch_RPMs_to_zstd_compression#Use_case:_Firefox_installation" class="onebox" target="_blank" rel="noopener">https://fedoraproject.org/wiki/Changes/Switch_RPMs_to_zstd_compression#Use_case:_Firefox_installation</a></p>
<p>Another comparison by different project (not against xz but useful):</p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://peazip.github.io/fast-compression-benchmark-brotli-zstandard.html#brotli_vs_zstd_compressor">
  <header class="source">

      <a href="https://peazip.github.io/fast-compression-benchmark-brotli-zstandard.html#brotli_vs_zstd_compressor" target="_blank" rel="noopener">PeaZip file archiver utility, free RAR ZIP software</a>
  </header>

  <article class="onebox-body">
    

<h3><a href="https://peazip.github.io/fast-compression-benchmark-brotli-zstandard.html#brotli_vs_zstd_compressor" target="_blank" rel="noopener">Fast compression: Brotli Zstandard comparative speed performances test</a></h3>

  <p>Fast compression benchmark. Comparison of Brotli, Zstandard formats performances, br vs zst compression and extraction speed, comparative test with 7Z LZMA2, RAR PPMd, ZIP Deflate algorithms.</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>Second issue of xz is the Nebraska issue (too much work for very important software for single or very few devs over long time):</p>
<aside class="onebox discoursetopic" data-onebox-src="https://discussion.fedoraproject.org/t/switch-to-zstd-from-xz/110789/16">
  <header class="source">
      <img src="https://us1.discourse-cdn.com/fedoraproject/optimized/2X/4/4a936c14d6cd5d29d6b7baf2511e406eeabed12c_2_32x32.png" class="site-icon" width="32" height="32">

      <a href="https://discussion.fedoraproject.org/t/switch-to-zstd-from-xz/110789/16" target="_blank" rel="noopener" title="04:00AM - 01 April 2024">Fedora Discussion – 1 Apr 24</a>
  </header>

  <article class="onebox-body">
    <img src="https://us1.discourse-cdn.com/fedoraproject/original/2X/4/4701afb8ed62770e56cfd748606abe1c0d616b84.png" class="thumbnail onebox-avatar" width="500" height="500">

<div class="title-wrapper">
  <h3><a href="https://discussion.fedoraproject.org/t/switch-to-zstd-from-xz/110789/16" target="_blank" rel="noopener">Switch to zstd from xz</a></h3>
  <div class="topic-category">
      <span class="badge-wrapper bullet">
        <span class="badge-category-bg" style="background-color: #51A2DA;"></span>
        <span class="badge-category clear-badge">
          <span class="category-name">Project Discussion</span>
        </span>
      </span>
    <div class="topic-header-extra">
      <div class="list-tags">
        <div class="discourse-tags">
          <svg class="fa d-icon d-icon-tag svg-icon svg-string"><use href="#tag"></use></svg>
            <span class="discourse-tag simple">silverblue-team</span>
            <span class="discourse-tag simple">workstation-wg</span>
        </div>
      </div>
    </div>
  </div>
</div>

  <p>You won’t find much disagreement that zstd is a better algorithm, in most cases.  This is pretty well understood by this point.  Again though, it’s kind of beside the point.  Things that currently use XZ, cannot necessarily just switch out of the...</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>The XZ maintainer experienced burnout and consequently scaled back some of the contribution reviews, which led to the XZ issue. GNOME discussed this issue as well:</p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://gitlab.gnome.org/GNOME/nautilus/-/issues/1936#note_2090670">
  <header class="source">
      <img src="https://gitlab.gnome.org/uploads/-/system/appearance/favicon/1/GnomeLogoVertical.svg.png" class="site-icon" width="32" height="32">

      <a href="https://gitlab.gnome.org/GNOME/nautilus/-/issues/1936#note_2090670" target="_blank" rel="noopener">GitLab</a>
  </header>

  <article class="onebox-body">
    <img width="64" height="64" src="https://gitlab.gnome.org/uploads/-/system/project/avatar/1/bitmap.png" class="thumbnail onebox-avatar">

<h3><a href="https://gitlab.gnome.org/GNOME/nautilus/-/issues/1936#note_2090670" target="_blank" rel="noopener">Use zst compression instead of xz (#1936) · Issues · GNOME / Files · GitLab</a></h3>

  <p>Use cases ZStandard is a new file compression algorithm, the reference implementation of which, zstd, greatly outperforms every other compression method...</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>Bottom line is that zstd is the way to go.</p>
<p>Good thing that you reached to the conclusion second best choice.</p>
          <p><a href="https://forums.kicksecure.com/t/dracut-compression-research/1131/2">Read full topic</a></p>
        ]]></description>
        <link>https://forums.kicksecure.com/t/dracut-compression-research/1131/2</link>
        <pubDate>Fri, 11 Jul 2025 17:12:13 +0000</pubDate>
        <guid isPermaLink="false">forums.kicksecure.com-post-1131-2</guid>
        <source url="https://forums.kicksecure.com/t/dracut-compression-research/1131.rss">Dracut compression research</source>
      </item>
      <item>
        <title>Dracut compression research</title>
        <dc:creator><![CDATA[arraybolt3]]></dc:creator>
        <description><![CDATA[
            <p>Patrick asked me to look into the compression options offered by Dracut for initramfs compression. This is the results of that research, written here since the results are a bit lengthy and require the ability to post images for sharing the charts I made.</p>
<p><strong>tl;dr: I think we should use xz compression. It’s acceptably fast, it compresses way better, and there doesn’t seem to be any compelling reason to avoid it.</strong></p>
<p>The initramfs has to be decompressed by the kernel on boot, so I only researched compression algorithms supported by the kernel in Debian Bookworm. (Trixie supports the exact same compression algorithms, so this research should apply to Trixie as well, assuming the compression utilities perform similarly in Trixie to how they perform in Bookworm, which I find likely given the age of these utilities.)</p>
<p>Bookworm’s kernel and Dracut both support the following compression algorithms:</p>
<ul>
<li>gzip (this is what we’re using now)</li>
<li>lz4</li>
<li>lzma</li>
<li>lzo</li>
<li>xz</li>
<li>zstd</li>
<li>cat (uncompressed, taken into consideration to provide a best-case scenario for time and a worst-case scenario for size)</li>
</ul>
<p>Dracut also supports bzip2, but Bookworm’s and Trixie’s kernels both did not appear to support that.</p>
<p>To determine which algorithm was most likely desirable, I benchmarked them against each other. The following testing methodology was used:</p>
<ul>
<li>Create a file, <code>/etc/dracut.conf.d/99-compress.conf</code> to set the compression algorithm in.</li>
<li>For each compression algorithm, change <code>99-compress.conf</code> to specify the desired algorithm, then run <code>time sudo dracut --force</code> three times.</li>
<li>Record the output of <code>time</code> after each dracut invocation.</li>
<li>Record the size of the output initramfs after each dracut invocation.</li>
</ul>
<p>In all instances, the file size of the output initramfs was identical (to within a kilobyte at least) across all three runs of Dracut when using a single compression algorithm, so I only recorded file size once per algorithm. All tests were run in a KVM/QEMU virtual machine with 4 virtual CPUs, 4 GB RAM, and all host CPU features passed through to the guest (<code>-cpu host</code>). The host system has an i9-14900HX processor. The raw results of the benchmarks are as follows:</p>
<ul>
<li>gzip
<ul>
<li>run 1: <code>0.06s user 0.10s system 1% cpu 12.240 total</code></li>
<li>run 2: <code>0.01s user 0.02s system 0% cpu 10.907 total</code></li>
<li>run 3: <code>0.01s user 0.02s system 0% cpu 10.912 total</code></li>
<li>file size: <code>39724K</code></li>
</ul>
</li>
<li>lz4
<ul>
<li>run 1: <code>0.02s user 0.01s system 0% cpu 7.476 total</code></li>
<li>run 2: <code>0.02s user 0.01s system 0% cpu 7.408 total</code></li>
<li>run 3: <code>0.01s user 0.02s system 0% cpu 7.541 total</code></li>
<li>file size: <code>48064K</code></li>
</ul>
</li>
<li>lzma
<ul>
<li>run 1: <code>0.09s user 0.07s system 0% cpu 46.595 total</code></li>
<li>run 2: <code>0.01s user 0.02s system 0% cpu 45.677 total</code></li>
<li>run 3: <code>0.02s user 0.01s system 0% cpu 45.339 total</code></li>
<li>file size: <code>26292K</code></li>
</ul>
</li>
<li>lzop
<ul>
<li>run 1: <code>0.09s user 0.08s system 0% cpu 38.810 total</code></li>
<li>run 2: <code>0.02s user 0.01s system 0% cpu 37.862 total</code></li>
<li>run 3: <code>0.01s user 0.02s system 0% cpu 37.837 total</code></li>
<li>file size: <code>44880K</code></li>
</ul>
</li>
<li>xz
<ul>
<li>run 1: <code>0.09s user 0.08s system 1% cpu 11.655 total</code></li>
<li>run 2: <code>0.01s user 0.01s system 0% cpu 10.542 total</code></li>
<li>run 3: <code>0.02s user 0.01s system 0% cpu 10.571 total</code></li>
<li>file size: <code>28288K</code></li>
</ul>
</li>
<li>zstd
<ul>
<li>run 1: <code>0.10s user 0.07s system 1% cpu 8.676 total</code></li>
<li>run 2: <code>0.08s user 0.09s system 2% cpu 7.680 total</code></li>
<li>run 3: <code>0.01s user 0.01s system 0% cpu 7.404 total</code></li>
<li>file size: <code>33248K</code></li>
</ul>
</li>
<li>cat (no compression, baseline)
<ul>
<li>run 1: <code>0.09s user 0.08s system 3% cpu 5.279 total</code></li>
<li>run 2: <code>0.01s user 0.02s system 0% cpu 4.189 total</code></li>
<li>run 3: <code>0.01s user 0.02s system 0% cpu 4.252 total</code></li>
<li>file size: <code>136088K</code></li>
</ul>
</li>
</ul>
<p>I did not benchmark boot speed with each of the different algorithms used, although I did verify that the virtual machine booted with an initramfs made with each algorithm. The boot speed seemed pretty much the same to me with each algorithm, and would have been difficult to measure in an objective, reliable fashion. I will note, I may have noticed a very slight speedup during boot with the zstd algorithm.</p>
<p>The following two graphs are provided to visualize the data above (created using LibreOffice):</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://forums.kicksecure.com/uploads/default/original/1X/e92324d818d85c5e818003116c0999d6539ad7a6.png" data-download-href="https://forums.kicksecure.com/uploads/default/e92324d818d85c5e818003116c0999d6539ad7a6" title="initramfs-gen-speed"><img src="https://forums.kicksecure.com/uploads/default/original/1X/e92324d818d85c5e818003116c0999d6539ad7a6.png" alt="initramfs-gen-speed" data-base62-sha1="xgqxRhWowoHkhwQKDySGIr6PCzI" width="605" height="340"></a></div><p></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://forums.kicksecure.com/uploads/default/original/1X/2bd2414d9be6f209da5f48a7de40331332b64632.png" data-download-href="https://forums.kicksecure.com/uploads/default/2bd2414d9be6f209da5f48a7de40331332b64632" title="initramfs-gen-efficiency"><img src="https://forums.kicksecure.com/uploads/default/original/1X/2bd2414d9be6f209da5f48a7de40331332b64632.png" alt="initramfs-gen-efficiency" data-base62-sha1="6fF02CNFpWuQxjjDkTxl0imYZz4" width="605" height="340"></a></div><p></p>
<p>Takeaways from the above data:</p>
<ul>
<li>From a size standpoint, lzma performed the best, lz4 performed the worst.</li>
<li>From a speed standpoint, zstd and lz4 are about tied for best speed, while lzma is the worst for speed.</li>
<li>lzo/lzop is certainly a bad choice - it approaches lzma in slowness while also making a file larger than gzip and almost as large as lz4. It’s the worst of all worlds combined.</li>
<li>xz is probably the most compelling as far as a balance between good speed and good compression - it’s almost as good as lzma as far as size, while being just a hair faster than gzip.</li>
<li>zstd is a bit of an improvement over gzip in size, while also being very very fast.</li>
</ul>
<p>I am of the opinion that xz is the best choice here based on this data, as our existing compression speed has been acceptable and shaving off 2-3 seconds per initramfs generation doesn’t seem that compelling except perhaps when doing ARM builds of Kicksecure on x86_64 hardware.</p>
<p>It is worth noting, people who know much more about compression tools under the hood than I do have complaints about design flaws in xz, which are documented <a href="https://www.nongnu.org/lzip/xz_inadequate.html" rel="noopener nofollow ugc">here</a>. I do not believe the issues mentioned in this article are of concern for the following reasons:</p>
<ul>
<li>The article primarily relates to xz’s suitability for long-term archival. Kernel initramfs files aren’t really something where “long-term archival” is a concern.</li>
<li>Most of the article focuses on xz’s lack of resiliency in the face of partial archive corruption. But we don’t care about this at all, we assume the initramfs is bit-for-bit identical to when it was created, and indeed in the future we will likely be signing the initramfs as part of Verified Boot (which will mandate that the initramfs be bit-for-bit idential to when it was created).</li>
<li>Other parts of the article focus on compatibility issues with different versions of xz. This also is not a concern - as long as dracut produces an initramfs that the Linux kernel can read and boot with, things are compatible enough for us.</li>
<li>The rest of the article appears to focus on various design decisions in xz that could have been made better. None of that is relevant for us though, since whatever feature set Dracut is using in xz is good enough to give it a very acceptable compression speed while also providing the second-smallest file size of any of the compression algorithms documented here. Even if xz could be better than it is, right now it’s better than everything else except maybe zstd if you really care about speed.</li>
</ul>
<p>Someone else I saw did <a href="https://linuxreviews.org/Comparison_of_Compression_Algorithms" rel="noopener nofollow ugc">similar compression performance benchmarking</a> and concluded that <code>zstd</code> was the best general-purpose algorithm, though the data they present shows that parallel xz actually performed better than zstd’s best compression in both compression size and speed. One concerning thing this article does point out though is that xz can use a lot of RAM. For this reason, I tried generating a dracut initramfs using xz compression in a Kicksecure-CLI VirtualBox VM with only 512 MB RAM. Memory consumption during the initramfs generation rose to a maximum of 318M according to htop, and went down to 263M once the initramfs was generated, meaning that dracut and whatever tools it ran (including xz) used about 55M of memory during the generation process. Only about 1.97M of swap ended up used. This is much more than both gzip and zstd (which both only require about 5M of memory), but seems acceptable to me. 55M is not that much, especially given that <code>fwupd</code> is just sitting there eating 97M while doing basically nothing.</p>
<p>As a final note, I checked <a href="http://cve.org" rel="noopener nofollow ugc">cve.org</a> to see if security vulnerabilities were found in either the xz or zstd compressors in the Linux kernel. I found no vulnerabilities for either algorithm (using the search terms “linuz kernel xz” and “linux kernel zstd”).</p>
<p>In conclusion, I believe xz is the best compression method for us to use with dracut, due to its slightly better performance and much better compression compared to our current default, gzip. zstd is my second choice, and may be what we want to use if we have problems with xz’s speed or memory consumption.</p>
          <p><a href="https://forums.kicksecure.com/t/dracut-compression-research/1131/1">Read full topic</a></p>
        ]]></description>
        <link>https://forums.kicksecure.com/t/dracut-compression-research/1131/1</link>
        <pubDate>Tue, 08 Jul 2025 00:48:15 +0000</pubDate>
        <guid isPermaLink="false">forums.kicksecure.com-post-1131-1</guid>
        <source url="https://forums.kicksecure.com/t/dracut-compression-research/1131.rss">Dracut compression research</source>
      </item>
  </channel>
</rss>
