<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Live mode in Qubes 4.3?</title>
    <link>https://forums.kicksecure.com/t/live-mode-in-qubes-4-3/1207</link>
    <description>@arraybolt3 Hello!
The new feature will allow selecting the Kicksecure and Whonix boot modes in Qubes OS. Will it enable selecting live mode in AppVM?
https://qubes-doc--1504.org.readthedocs.build/en/1504/developer/releases/4_3/release-notes.html#security-features
https://github.com/QubesOS/qubes-issues/issues/9920
https://github.com/QubesOS/qubes-issues/issues/9750</description>
    
    <lastBuildDate>Mon, 11 Aug 2025 17:20:30 +0000</lastBuildDate>
    <category>Qubes</category>
    <atom:link href="https://forums.kicksecure.com/t/live-mode-in-qubes-4-3/1207.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Live mode in Qubes 4.3?</title>
        <dc:creator><![CDATA[sam]]></dc:creator>
        <description><![CDATA[
            <p>Thank you!!</p>
          <p><a href="https://forums.kicksecure.com/t/live-mode-in-qubes-4-3/1207/3">Read full topic</a></p>
        ]]></description>
        <link>https://forums.kicksecure.com/t/live-mode-in-qubes-4-3/1207/3</link>
        <pubDate>Mon, 11 Aug 2025 17:20:30 +0000</pubDate>
        <guid isPermaLink="false">forums.kicksecure.com-post-1207-3</guid>
        <source url="https://forums.kicksecure.com/t/live-mode-in-qubes-4-3/1207.rss">Live mode in Qubes 4.3?</source>
      </item>
      <item>
        <title>Live mode in Qubes 4.3?</title>
        <dc:creator><![CDATA[arraybolt3]]></dc:creator>
        <description><![CDATA[
            <p>I was hopeful it would allow that, but unfortunately it doesn’t <em>yet</em>. Live mode requires using an in-VM kernel with Dracut, and boot modes are only supported when using a dom0-provided kernel right now. There is ongoing work to get in-VM kernel support for boot modes, but it requires a GRUB patch which I’m still working on getting upstreamed and integrated into Qubes OS.</p>
          <p><a href="https://forums.kicksecure.com/t/live-mode-in-qubes-4-3/1207/2">Read full topic</a></p>
        ]]></description>
        <link>https://forums.kicksecure.com/t/live-mode-in-qubes-4-3/1207/2</link>
        <pubDate>Mon, 11 Aug 2025 14:07:39 +0000</pubDate>
        <guid isPermaLink="false">forums.kicksecure.com-post-1207-2</guid>
        <source url="https://forums.kicksecure.com/t/live-mode-in-qubes-4-3/1207.rss">Live mode in Qubes 4.3?</source>
      </item>
      <item>
        <title>Live mode in Qubes 4.3?</title>
        <dc:creator><![CDATA[sam]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://forums.kicksecure.com/u/arraybolt3">@arraybolt3</a> Hello!<br>
The new feature will allow selecting the Kicksecure and Whonix boot modes in Qubes OS. Will it enable selecting live mode in AppVM?<br>
<a href="https://qubes-doc--1504.org.readthedocs.build/en/1504/developer/releases/4_3/release-notes.html#security-features" class="onebox" target="_blank" rel="noopener nofollow ugc">https://qubes-doc--1504.org.readthedocs.build/en/1504/developer/releases/4_3/release-notes.html#security-features</a></p><aside class="onebox githubissue" data-onebox-src="https://github.com/QubesOS/qubes-issues/issues/9920">
  <header class="source">

      <a href="https://github.com/QubesOS/qubes-issues/issues/9920" target="_blank" rel="noopener nofollow ugc">github.com/QubesOS/qubes-issues</a>
  </header>

  <article class="onebox-body">
    <div class="github-row">
  <div class="github-icon-container" title="Issue" data-github-private-repo="false">
	  <svg width="60" height="60" class="github-icon" viewBox="0 0 14 16" aria-hidden="true"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg>
  </div>

  <div class="github-info-container">
    <h4>
      <a href="https://github.com/QubesOS/qubes-issues/issues/9920" target="_blank" rel="noopener nofollow ugc">Allow VMs to specify boot modes as being only intended for AppVMs or templates</a>
    </h4>

    <div class="github-info">
      <div class="date">
        opened <span class="discourse-local-date" data-format="ll" data-date="2025-04-27" data-time="22:20:50" data-timezone="UTC">10:20PM - 27 Apr 25 UTC</span>
      </div>


      <div class="user">
        <a href="https://github.com/ArrayBolt3" target="_blank" rel="noopener nofollow ugc">
          <img alt="" src="https://avatars.githubusercontent.com/u/104878738?v=4" class="onebox-avatar-inline" width="20" height="20">
          ArrayBolt3
        </a>
      </div>
    </div>

    <div class="labels">
        <span style="display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;">
          C: core
        </span>
        <span style="display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;">
          release notes
        </span>
        <span style="display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;">
          ux
        </span>
        <span style="display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;">
          P: default
        </span>
        <span style="display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;">
          targets-4.3
        </span>
    </div>
  </div>
</div>

  <div class="github-row">
    <p class="github-body-container">[How to file a helpful issue](https://www.qubes-os.org/doc/issue-tracking/)

###<span class="show-more-container"><a href="" rel="noopener" class="show-more">…</a></span><span class="excerpt hidden"> The problem you're addressing (if any)

Right now any boot modes advertised by a template will be visible for both that template and any AppVMs derived from it. This might not make sense for all boot modes - Kicksecure would like to implement an "unrestricted admin" boot mode that removes the user-sysmaint-split package during early boot to allow the user full `sudo` access for that boot only. This would take advantage of the fact that rebooting an AppVM resets most of its root filesystem to make this change temporary, so that users can switch between safe and unrestricted modes. This boot mode only makes sense for AppVMs, it would be detrimental for a Kicksecure template to be booted in this way.

### The solution you'd like

Add another boot mode qvm feature class, `boot-mode.restrict.(boot-mode-name)`, which can be set to either `AppVM` or `TemplateVM`. The boot mode will then be restricted to that VM type (i.e. if the feature is set to `AppVM`, that boot mode will only be available for AppVMs, not TemplateVMs).

This could potentially be made more flexible by allowing the feature to be set to a comma-separated list of the VM types the boot mode should be supported in (AppVM, TemplateVM, DispVM, RemoteVM, etc.), but I fear that might cause problems because of the presence of AppVM default boot modes. If a template sets a boot mode that isn't supported by DispVMs as the AppVM default boot mode, what should a DispVM based upon that template do? Thus why I believe this should only allow two restriction choices. "AppVM" in the context of this option really would only mean "anything other than a TemplateVM". Perhaps the wording should be adjusted accordingly, not sure.

The only problem I can see 

### The value to a user and who that user might be

Less confusing in the user interface, users won't see boot modes that they shouldn't be using.

### Completion criteria checklist

(This section is for developer use only. Please do not modify it.)</span></p>
  </div>

  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>
<aside class="onebox githubissue" data-onebox-src="https://github.com/QubesOS/qubes-issues/issues/9750">
  <header class="source">

      <a href="https://github.com/QubesOS/qubes-issues/issues/9750" target="_blank" rel="noopener nofollow ugc">github.com/QubesOS/qubes-issues</a>
  </header>

  <article class="onebox-body">
    <div class="github-row">
  <div class="github-icon-container" title="Issue" data-github-private-repo="false">
	  <svg width="60" height="60" class="github-icon" viewBox="0 0 14 16" aria-hidden="true"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg>
  </div>

  <div class="github-info-container">
    <h4>
      <a href="https://github.com/QubesOS/qubes-issues/issues/9750" target="_blank" rel="noopener nofollow ugc">Improve support for booting qubes with custom kernel command line parameters (useful for Kicksecure and Whonix user-sysmaint-split)</a>
    </h4>

    <div class="github-info">
      <div class="date">
        opened <span class="discourse-local-date" data-format="ll" data-date="2025-01-31" data-time="23:19:01" data-timezone="UTC">11:19PM - 31 Jan 25 UTC</span>
      </div>

        <div class="date">
          closed <span class="discourse-local-date" data-format="ll" data-date="2025-03-26" data-time="23:12:31" data-timezone="UTC">11:12PM - 26 Mar 25 UTC</span>
        </div>

      <div class="user">
        <a href="https://github.com/ArrayBolt3" target="_blank" rel="noopener nofollow ugc">
          <img alt="" src="https://avatars.githubusercontent.com/u/104878738?v=4" class="onebox-avatar-inline" width="20" height="20">
          ArrayBolt3
        </a>
      </div>
    </div>

    <div class="labels">
        <span style="display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;">
          C: other
        </span>
        <span style="display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;">
          release notes
        </span>
        <span style="display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;">
          P: default
        </span>
        <span style="display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;">
          targets-4.3
        </span>
    </div>
  </div>
</div>

  <div class="github-row">
    <p class="github-body-container">### The problem you're addressing (if any)

(This is somewhat of a followup to a<span class="show-more-container"><a href="" rel="noopener" class="show-more">…</a></span><span class="excerpt hidden"> conversation I had with Demi and Marek in the Qubes OS Matrix room.)

Currently, Qubes OS allows booting a Qube with special kernel command line parameters by using a special cli-only feature (sadly I can't remember the name of the tool used for this). If you don't do this, each qube is simply booted with some default command-line parameters, which are sufficient to allow the VM to boot and be usable. Thus far, this has been good enough, since each OS booted in Qubes generally doesn't have multiple boot modes that need to be supported.

With the introduction of the [user-sysmaint-split](https://github.com/kicksecure/user-sysmaint-split) feature into Kicksecure and Whonix, things have changed somewhat. As a form of defense-in-depth on top of the security Qubes and Kicksecure already provide, Kicksecure will soon offer a package (really a set of packages) that will allow separating user and root responsibilities much more strongly than usually done. The current implementation uses file permissions on the `sudo` and `pkexec` executables that makes them only able to be run by a special `sysmaint` user, which is locked by default and cannot be signed into normally. This makes `sudo` and `pkexec` completely unable to be run during a normal user session, greatly reducing the risk of a root compromise. To gain access to the `sysmaint` account, the user must physically reboot the machine and select "PERSISTENT mode SYSMAINT" from the list of boot options - doing so triggers a systemd unit that unlocks and automatically logs into the sysmaint account. For added security, most if not all non-essential services are suppressed while booted into sysmaint mode, and a very minimal desktop named [sysmaint-panel](https://github.com/kicksecure/sysmaint-panel) is provided to discourage the user from launching potentially dangerous applications like Firefox while in this mode. Users can run privileged commands even when not booted into sysmaint mode through an SUID-less privilege escalation framework called [privleap](https://github.com/Kicksecure/privleap).

This is all well and good, but right now this only works on physical hardware and traditional virtual machines (virt-manager, VirtualBox), because it requires the user to be able to boot into "sysmaint mode", which requires access to a GRUB console. Qubes VMs don't usually even use GRUB (since they share the dom0 kernel which is directly booted by Xen), and even when they do for some reason, you don't get access to the console during bootup unless you're using an HVM. This puts Qubes OS users in a bit of a sticky spot if they want to take advantage of the features offered by user-sysmaint-split. In UX terms, basically the end result is that `sudo` and `pkexec` become permanently unusable, and to get root access the user has to open up a root console either via `qvm-run` (which is dangerous because of X11) or via the "Open console in qube" feature of Qube Manager (which is secure and neat but also slow and somewhat difficult to use). Most of the "nice bits" of user-sysmaint-split are not accessible. In addition, Kicksecure templates will *also* be basically "locked down" by this, making it tricky to make changes or install software in the templates without resorting to one of the above solutions. Only AppVMs really need `sudo` and `pkexec` locked down, ideally a Kicksecure template should have full root access out of the box.

Last but not least, Qubes OS only supports specifying custom kernel parameters for a qube if that qube shares dom0's kernel. If you use a VM-internal kernel, you can't set the kernel parameters because those are hardcoded into a GRUB config file within the qube. This is a problem since Kicksecure has some interest in using qube-internal kernels by default, and obviously users may want to use custom kernels or the like without losing the ability to control (or even use) user-sysmaint-split.

### The solution you'd like

The solution I have in mind here isn't really one solution, but rather a set of them that fixes all of the paper cuts here:

* Templates should be able to specify auxiliary kernel parameters that Qubes OS should use when booting them and AppVMs based on them. Each template should be able to specify more than one set of kernel parameters, one per boot mode it supports.
* These boot modes should somehow be exposed to the end user. How exactly this should look I'm unclear on - an easy solution would be to provide a drop-down in Qube Manager's settings window that would allow selecting the boot mode the VM should use on next bootup. A potentially more usable solution would be to integrate the boot modes into the application menu somehow, but this could overcomplicate the user interface and might also be a massive pain to implement.
* Templates should be able to specify the default boot mode for themselves and the default boot mode for derived AppVMs separately. This way the Kicksecure template could be set up so that it would boot in sysmaint mode by default, while AppVMs would be booted in user mode by default. This would allow the Kicksecure template to be used in an intuitive fashion similar to most existing templates.
* There should be some way to boot a VM with dom0-specified kernel parameters *even if* you're booting using a qube-internal kernel. Demi, Marek, and I had a pretty long discussion about how this could be done, ultimately it seems that pvgrub is the best tool to use for this, but will need some extra features for it to work.
* In a perfect world, the user should be able to define their own boot modes. That would make this rather complex suite of features be useful for much more than just Kicksecure and Whonix.

None of this is set in stone, I'm definitely open to alternate ways of implementing things that would be easier. This is obviously a very large list of features, which I intend to contribute or at least help contribute.

### The value to a user and who that user might be

user-sysmaint-split will work really, really nicely in Qubes OS. Additionally, with the ability to specify auxiliary kernel parameters in templates, Kicksecure and Whonix could use the extensive hardening parameters they use on the desktop within Qubes as well. Users who need or want to tweak their kernels and kernel config will also have much more freedom to do so, which could benefit Qubes OS devs as well as highly advanced users.

### Completion criteria checklist

_No response_</span></p>
  </div>

  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

          <p><a href="https://forums.kicksecure.com/t/live-mode-in-qubes-4-3/1207/1">Read full topic</a></p>
        ]]></description>
        <link>https://forums.kicksecure.com/t/live-mode-in-qubes-4-3/1207/1</link>
        <pubDate>Mon, 11 Aug 2025 05:11:06 +0000</pubDate>
        <guid isPermaLink="false">forums.kicksecure.com-post-1207-1</guid>
        <source url="https://forums.kicksecure.com/t/live-mode-in-qubes-4-3/1207.rss">Live mode in Qubes 4.3?</source>
      </item>
  </channel>
</rss>
